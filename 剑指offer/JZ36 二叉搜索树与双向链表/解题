【C++】

一：构造一个指向上一个结点的指针pre（全局变量）

依旧采取中序遍历。
根据题目的要求1，不能创建新的结点，而方法一的数组中存储的其实是结点，并不满足题意；所以需要在中序遍历的过程中，直接对结点的指针进行调整。
调整的思路如下：
（1）使用一个指针preNode指向当前结点root的前继。
（2）对于当前结点root，有root->left要指向前继preNode（中序遍历时，对于当前结点root，其左孩子已经遍历完成了，此时root->left可以被修改。）；
同时，preNode->right要指向当前结点（当前结点是preNode的后继），此时对于preNode结点，它已经完全加入双向链表。

/*
struct TreeNode {
	int val;
	struct TreeNode *left;
	struct TreeNode *right;
	TreeNode(int x) :
			val(x), left(NULL), right(NULL) {
	}
};*/
class Solution {
public:
    TreeNode* pre;
    void preorder(TreeNode* root){
        if(!root) return;
        preorder(root->left);
        root->left = pre;
        if(pre){
            pre->right = root;
        }
        pre = root;
        preorder(root->right);
    }
    
    TreeNode* Convert(TreeNode* pRootOfTree) {
        if(!pRootOfTree) return pRootOfTree;
        TreeNode* p = pRootOfTree;
        while(p->left) p = p->left;
        preorder(pRootOfTree);
        return p;
    }
};

二：建立数组（与题意不符——不能建立新的结点）
已知将二叉搜索树进行中序遍历可以得到由小到大的顺序排列，因此本题最直接的想法就是进行中序遍历。
将中序遍历的结果用数组存储下来，得到的数组是有从小到大顺序的。最后将数组中的结点依次连接即可.

/*
struct TreeNode {
	int val;
	struct TreeNode *left;
	struct TreeNode *right;
	TreeNode(int x) :
			val(x), left(NULL), right(NULL) {
	}
};*/
class Solution {
public:
    vector<TreeNode*> list;
    void preorder(TreeNode* root){
        if(!root) return;
        preorder(root->left);
        list.push_back(root);
        preorder(root->right);
    }
    
    TreeNode* Convert(TreeNode* pRootOfTree) {
        if(!pRootOfTree) return pRootOfTree;
        preorder(pRootOfTree);
        int len = list.size();
        for(int i=0; i<len-1; i++){
            list[i+1]->left = list[i];
            list[i]->right = list[i+1];
        }
        return list[0];
    }
};

三：dfs

preorder(cur): 递归法中序遍历；
终止条件： 当节点 cur 为空，代表越过叶节点，直接返回；

递归左子树，即 dfs(cur.left) ；
构建链表：
1.当 pre 为空时： 代表正在访问链表头节点，记为 head ；
2.当 pre 不为空时： 修改双向节点引用，即 pre.right = cur ， cur.left = pre ；
3.保存 cur ： 更新 pre = cur ，即节点 cur 是后继节点的 pre ；
递归右子树，即 dfs(cur.right) ；

treeToDoublyList(root)：
特例处理： 若节点 root 为空，则直接返回；
初始化： 空节点 pre ；
转化为双向链表： 调用 dfs(root) ；
构建循环链表： 中序遍历完成后，head 指向头节点， pre 指向尾节点，因此修改 head 和 pre 的双向节点引用即可；
返回值： 返回链表的头节点 head 即可；

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;

    Node() {}

    Node(int _val) {
        val = _val;
        left = NULL;
        right = NULL;
    }

    Node(int _val, Node* _left, Node* _right) {
        val = _val;
        left = _left;
        right = _right;
    }
};
*/
class Solution {
public:
    Node* pre;                   //前继
    Node* head;                  //双向链表的头
    void preorder(Node* root){
        if(!root) return ;
        preorder(root->left);
        if(pre!=NULL){
            pre->right = root;
        }
        else head = root;
        root->left = pre;
        pre = root;
        preorder(root->right);
    }
    Node* treeToDoublyList(Node* root) {
        if(!root) return root;
        preorder(root);
        head->left = pre;
        pre->right = head;
        return head;
    }
};

【C++】

递归是首先打印最外层的元素，将内层的矩阵作为一个全新的矩阵进行递归。
对于每层，从左上方开始以顺时针的顺序遍历所有元素。假设当前层的左上角位于 (top,left)，右下角位于(bottom,right)，按照如下顺序遍历当前层的元素。
1、从左到右遍历上侧元素，依次为(top,left) 到(top,right)。
2、从上到下遍历右侧元素，依次为(top+1,right) 到 (bottom,right)。
3、如果 left<right 且top<bottom，则从右到左遍历下侧元素，依次为(bottom,right−1) 到 (bottom,left+1)，以及从下到上遍历左侧元素，依次为(bottom,left) 到(top+1,left)。
遍历完当前层的元素之后，将left 和top 分别增加 1，将 right 和 bottom 分别减少 11，进入下一次递归，直到遍历完所有元素为止。

图解：从左向右、从上向下、从右向左、从下向上
      首先递归最外层，再递归第二层。。。

class Solution {
public:
    void print(vector<vector<int>> &matrix, vector<int> &vec, int lx, int ly, int rx, int ry){
        for(int i=ly;i<=ry;++i) vec.push_back(matrix[lx][i]);
        for(int j=lx+1;j<=rx;++j) vec.push_back(matrix[j][ry]);
        int h = rx-lx+1;
        if(h>1)
            for(int ri=ry-1;ri>=ly;--ri) vec.push_back(matrix[rx][ri]);
        int w = ry-ly+1;
        if(w>1)
            for(int rj=rx-1;rj>=lx+1;--rj) vec.push_back(matrix[rj][ly]);
    }
    
    vector<int> printMatrix(vector<vector<int> > matrix) {
        int rx = matrix.size()-1;
        int ry = matrix[0].size()-1;
        vector<int> vec;
        int lx = 0;
        int ly = 0;
        if(matrix.empty()) return vec;
        while(lx<=rx && ly<=ry){
            print(matrix, vec, lx++, ly++, rx--, ry--);
        }
        return vec;
    }
};

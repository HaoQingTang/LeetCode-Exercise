【C++】

一：双指针法
（1）用两个指针 slow, fast 指向头节点
（2）把 fast 指针后移 k 个位置
（3）把 slow, fast 同时后移直到 fast 到链表尾部，此时 slow 指向的就是倒数第 k 个节点。
/**
 * struct ListNode {
 *	int val;
 *	struct ListNode *next;
 *	ListNode(int x) : val(x), next(nullptr) {}
 * };
 */
class Solution {
public:
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     *
     * 
     * @param pHead ListNode类 
     * @param k int整型 
     * @return ListNode类
     */
    ListNode* FindKthToTail(ListNode* pHead, int k) {
        ListNode* fast = pHead;
        while(k-- && fast){
            fast = fast->next;
        }
        if(k>=0){
            return nullptr;
        }
        ListNode* slow = pHead;
        while(fast){
            fast = fast->next;
            slow = slow->next;
        }
        return slow;
    }
};

二：用数组记录
/**
 * struct ListNode {
 *	int val;
 *	struct ListNode *next;
 *	ListNode(int x) : val(x), next(nullptr) {}
 * };
 */
class Solution {
public:
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     *
     * 
     * @param pHead ListNode类 
     * @param k int整型 
     * @return ListNode类
     */
    ListNode* FindKthToTail(ListNode* pHead, int k) {
        vector<ListNode*> list1;
        while(pHead){
            list1.push_back(pHead);
            pHead = pHead->next;
        }
        int len = list1.size();
        if(len<k) return nullptr;
        return list1[len-k];
    }
};

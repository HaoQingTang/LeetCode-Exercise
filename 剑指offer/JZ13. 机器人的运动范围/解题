【C++】

一：dfs

递归参数： 当前元素在矩阵中的行列索引 i 和 j ，两者的数位和 si, sj 。

终止条件： 当 ① 行列索引越界 或 ② 数位和超出目标值 k 或 ③ 当前元素已访问过 时，返回0 ，代表不计入可达解。

递推工作：
标记当前单元格 ：将索引 (i, j) 存入 Set visited 中，代表此单元格已被访问过。
搜索下一单元格： 计算当前元素的 下、右 两个方向元素的数位和，并开启下层递归 。

回溯返回值： 返回 1 + 右方搜索的可达解总数 + 下方搜索的可达解总数，代表从本单元格递归搜索的可达解总数。

class Solution {
public:
    int val = 0;
    void dfs(int m, int n, int k, int i, int j, vector<vector<int>>& flag){
        if(i<0 || i>=m || j<0 || j>=n || count(i)+count(j)>k || flag[i][j]==1) return;
        val++;
        flag[i][j] = 1;
        //dfs(m, n, k, i-1, j, flag);
        dfs(m, n, k, i+1, j, flag);
        //dfs(m, n, k, i, j-1, flag);
        dfs(m, n, k, i, j+1, flag);
    }
    int count(int a){
        int num = 0;
        while(a!=0){
            num += a%10;
            a /= 10;
        }
        return num;
    }
    int movingCount(int m, int n, int k) {
        vector<vector<int>>flag (m, vector<int>(n, 0));
        dfs(m, n, k, 0, 0, flag);
        return val;
    }
};

时间复杂度：O(MN)
空间复杂度：O(MN)

二：bfs
初始化： 将机器人初始点(0,0) 加入队列 queue ；

迭代终止条件： queue 为空。代表已遍历完所有可达解。

迭代工作：
单元格出队： 将队首单元格的 索引、数位和 弹出，作为当前搜索单元格。
判断是否跳过： 若 ① 行列索引越界 或 ② 数位和超出目标值 k 或 ③ 当前元素已访问过 时，执行 continue 。
标记当前单元格 ：将单元格索引 (i, j) 存入 Set visited 中，代表此单元格 已被访问过 。
单元格入队： 将当前元素的 下方、右方 单元格的 索引、数位和 加入 queue 。

返回值： Set visited 的长度 len(visited) ，即可达解的数量。

class Solution {
public:
    int count(int a){
        int num = 0;
        while(a!=0){
            num += a%10;
            a /= 10;
        }
        return num;
    }
    int movingCount(int m, int n, int k) {
        vector<vector<int>>flag (m, vector<int>(n, 0));
        queue<pair<int, int>> q;
        int val = 0;
        q.push({0,0});
        while(!q.empty()){
            pair<int, int> rc = q.front();
            q.pop();
            int r = rc.first;
            int c = rc.second;
            if(r<0||r>=m||c<0||c>=n||count(r)+count(c)>k||flag[r][c]==1) continue;
            val++;
            flag[r][c] = 1;
            q.push({r+1, c});
            q.push({r, c+1});
        }
        return val;
    }
};

时间复杂度：O(MN)
空间复杂度：O(MN)

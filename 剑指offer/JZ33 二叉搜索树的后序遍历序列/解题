【C++】

题目大意：输入一个序列, 判断它是不是某二叉搜索树的后序遍历结果

一：分治
（1）二叉树的后序遍历顺序是：左子树 -> 右子树 -> 根节点
（2）因此序列的最后一个数代表了根节点
（3）因此我们可以将一个序列划分为3段, 左子树+右子树+根, 例如[4, 8, 6, 12, 16, 14, 10]可以根据根节点的值将其划分为左子树[4, 8, 6], 右子树[12, 16, 14], 根[10], 
由于我们是先确定的右子树区间, 因此当左子树区间中出现大于根节点的值时, 序列不合法, 我们再采用分治的思想, 对于每段序列代表的子树, 检查它的左子树和右子树, 当且仅当左右子树都合法时返回true

class Solution {
public:
    bool verify(vector<int> &seq, int begin, int end){
        if(begin>=end) return true;     //当前子树只有一个节点
        int root = seq[end];
        int r = end-1;
        while(r>=0 && seq[r]>root) r--;        //划分右子树
        for(int l=begin; l<=r; l++){           //检查左子树是否有大于根节点的树
            if(seq[l]>root) return false;
        }
        return verify(seq, begin, r)&&verify(seq, r+1, end-1);            //分治检查左子树和右子树
    }
    
    bool VerifySquenceOfBST(vector<int> sequence) {
        int len = sequence.size();
        if(len==0) return false;         //空树不是二叉搜索树
        return verify(sequence, 0, len-1);
    }
};

二：栈

算法流程：
初始化：单调栈stack ，父节点值root=+∞ （初始值为正无穷大，可把树的根节点看为此无穷大节点的左孩子）；
倒序遍历postorder：记每个节点为ri；
判断：若 ri>root，说明此后序遍历序列不满足二叉搜索树定义，直接返回false ；
更新父节点root：当栈不为空 且 ri<stack.peek()时，循环执行出栈，并将出栈节点赋给root 。
入栈：将当前节点ri入栈；
若遍历完成，则说明后序遍历满足二叉搜索树定义，返回true 。

class Solution {
public:
    bool verifyPostorder(vector<int>& postorder) {
        int len = postorder.size();
        if(len==0) return false;                     
        stack<int> stk;
        int i = len-1;
        int root = INT_MAX;
        while(i>=0){
            if(postorder[i]>root) return false;
            while(!stk.empty() && postorder[i]<stk.top()){
                root = stk.top();
                stk.pop();
            }
            stk.push(postorder[i]);
            i--;
        }
        return true;
    }
};

【C++】

一：哈希
class Solution {
public:
    int MoreThanHalfNum_Solution(vector<int> numbers) {
        unordered_map<int, int> map;
        for(auto val:numbers){
            map[val] += 1;
        }
        int len = numbers.size()/2;
        for(auto val:numbers){
            if(map[val]>len){
                return val;
            }
        }
        return 0;
    }
};

二：排序
class Solution {
public:
    int MoreThanHalfNum_Solution(vector<int> numbers) {
        sort(numbers.begin(), numbers.end());
        int len = numbers.size();
        int num = numbers[len/2];                        //众数一般也是中点
        int count = 0;
        for(auto i : numbers){
            if(i==num){
                count += 1;
            }
        }
        if(count>len/2) return num;
        return 0;
    }
};

三：候选法
加入数组中存在众数，那么众数一定大于数组的长度的一半。
思想就是：如果两个数不相等，就消去这两个数，最坏情况下，每次消去一个众数和一个非众数，那么如果存在众数，最后留下的数肯定是众数。
具体做法：
初始化：候选人cond = -1， 候选人的投票次数cnt = 0
遍历数组，如果cnt=0， 表示没有候选人，则选取当前数为候选人，++cnt
否则，如果cnt > 0, 表示有候选人，如果当前数=cond，则++cnt，否则--cnt
直到数组遍历完毕，最后检查cond是否为众数

class Solution {
public:
    int MoreThanHalfNum_Solution(vector<int> numbers) {
        int cond = -1;
        int count = 0;
        for(int i=0; i<numbers.size();i++){
            if(count == 0){
                cond = numbers[i];
                count += 1;
            }
            else{
                if(numbers[i] == cond) count += 1;
                else count -= 1;
            }
        }
        count = 0;
        for(auto k:numbers){
            if(k == cond){
                count += 1;
            }
        }
        if(count > numbers.size()/2){
            return cond;
        }
        return 0;
    }
};

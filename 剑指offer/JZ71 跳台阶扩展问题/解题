【C++】

一：递归（暴力）
class Solution {
public:
    int jumpFloorII(int number) {
        vector<int> dp(number+1,1);
        dp[0] = 0;
        dp[1] = 1;
        dp[2] = 2;
        for(int i=3; i<=number; i++){
            for(int j=0; j<i; j++){
                dp[i] += dp[j];
            }
        }
        return dp[number];
    }
};

时间复杂度：O(n^2)
空间复杂度：O(n)

二：递推
1.知道f(n) = f(n-1) + f(n-2) +....+f(0)，那么f(n-1) = f(n-2) + f(n-3) +......+f(0);
2.可知 f(n) = 2 * f(n-1);
3.初始ans = 1;

class Solution {
public:
    int jumpFloorII(int number) {
        if(number==1||number==0) return 1;
        int ans = 1;
        for(int i=2; i<=number; i++){
            ans *= 2;
        }
        return ans;
    }
};

时间复杂度：O(n)
空间复杂度：O(1)

三：数学
f(1) = 1;
f(2) = 2 * f(1) = 2^1
f(3) = 2 * f(2) = 4 = 2^2
假设f(k) = 2^(k-1) 成立
那么 f(k+1) = 2 * f(k) = 2^(k);
得出 f(n) = 2^(n-1);
左移1位：乘2；右移1位：除以2

class Solution {
public:
    int jumpFloorII(int number) {
        if(number==1||number==0) return 1;
        return 1<<(number-1);
    }
};

时间复杂度：O(1)
空间复杂度：O(1)

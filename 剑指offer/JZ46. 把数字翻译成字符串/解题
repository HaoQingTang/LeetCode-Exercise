【C++】

一：动态规划（to_string，从前往后）

当xi和xi-1组成的两位数字能被翻译时（10<=X<=25），dp[i]=dp[i-1]+dp[i-2]；否则，dp[i]=dp[i-1]

转移方程：
class Solution {
public:
    int translateNum(int num) {
        string number = to_string(num);
        vector<int> dp(number.size()+1);
        dp[0] = 1;
        if(number.substr(0,2)>="10" && number.substr(0,2)<="25") dp[1] = 2;
        else dp[1] = 1;
        for(int i=2; i<number.size(); i++){
            dp[i] = dp[i-1];
            if(number.substr(i-1,2)>="10" && number.substr(i-1,2)<="25") dp[i] += dp[i-2];
        }
        return dp[number.size()-1];
    }
};

class Solution {
public:
    int translateNum(int num) {
        string number = to_string(num);
        int dp0 = 1;
        int dp1 = 1;
        for(int i=2; i<=number.size(); i++){
            int dp = dp1;
            if(number.substr(i-2,2)>="10" && number.substr(i-2,2)<="25") dp += dp0;
            dp0 = dp1;
            dp1 = dp;
        }
        return dp1;
    }
};

时间复杂度：O(n)
空间复杂度：O(n)

二：动态规划（取余，从后往前）

class Solution {
public:
    int translateNum(int num) {
        int a = 1, b=1, y = num%10;   //a:i+1, b:i+2
        while(num!=0){
            num /= 10;
            int x = num%10;
            int tmp = x*10+y;
            int c = 0;
            if(tmp<=25 && tmp>=10) c = a+b;
            else c = a;
            y = x;
            b = a;
            a = c;
        }
        return a;
    }
};

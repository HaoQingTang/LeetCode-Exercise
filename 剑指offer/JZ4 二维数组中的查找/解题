【C++】

一：暴力解法
class Solution {
public:
    bool Find(int target, vector<vector<int> > array) {
        for(auto i : array){
            for(auto j : i){
                if(j == target){
                    return true;
                }
            }
        }
        return false;
    }
};

二：线性搜索
class Solution {
public:
    bool Find(int target, vector<vector<int> > array) {
        int m = array.size();
        int n = array[0].size();
        if(m==0 || n==0){
            return false;
        }
        int i=0, j=n-1;
        while(i<m && j>=0){
            if(array[i][j]<target){
                ++i;
            }
            else if(array[i][j]>target){
                --j;
            }
            else{
                return true;
            }
        }
        return false;
    }
};

如果val == target,直接返回
如果 tar > val, 说明target在更大的位置，val左边的元素显然都是 < val，间接 < tar，说明第 0 行（第一行）都是无效的，所以val下移到arr[1][5]
如果 tar < val, 说明target在更小的位置，val下边的元素显然都是 > val，间接 > tar，说明第 5 列（最后一列）都是无效的，所以val左移到arr[0][4]

三：二分搜索
class Solution {
public:
    bool search(int target, vector<int> arr){
        int left = 0;
        int right = arr.size()-1;
        while(left <= right){
            int middle = (left+right)/2;
            if(arr[middle] == target){
                return true;
            }
            else if(arr[middle] < target){
                ++left;
            }
            else{
                --right;
            }
        }
        return false;
    }
    
    bool Find(int target, vector<vector<int> > array) {
        for (auto i : array){
            if(search(target,i)){
                return true;
            }
        }
        return false;
    }
};

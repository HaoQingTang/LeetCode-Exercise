【C++】

一：递归
递归问题定义：root为树中找pq的父节点；如果root.val小于p证明root.val的值太小，遍历右子树。如果root.val的值大于q证明值太大遍历左子树

/**
 * struct TreeNode {
 *	int val;
 *	struct TreeNode *left;
 *	struct TreeNode *right;
 *	TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 * };
 */
class Solution {
public:
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     *
     * 
     * @param root TreeNode类 
     * @param p int整型 
     * @param q int整型 
     * @return int整型
     */
    TreeNode* dfs(TreeNode* root, int p, int q){
        if(!root) return nullptr;
        if(root->val==p || root->val==q) return root;
        if(p<root->val && q<root->val) return dfs(root->left, p, q);                   //二叉搜索树的性质：左子树一定比结点小，右子树一定比结点大
        if(p>root->val && q>root->val) return dfs(root->right, p, q);
        return root;
    }
    int lowestCommonAncestor(TreeNode* root, int p, int q) {
        TreeNode* result = dfs(root, p, q);
        return result->val;
    }
};

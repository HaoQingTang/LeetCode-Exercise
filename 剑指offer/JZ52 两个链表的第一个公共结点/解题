【C++】

一：数组
/*
struct ListNode {
	int val;
	struct ListNode *next;
	ListNode(int x) :
			val(x), next(NULL) {
	}
};*/
class Solution {
public:
    ListNode* FindFirstCommonNode( ListNode* pHead1, ListNode* pHead2) {
        vector<ListNode*> list1;
        vector<ListNode*> list2;
        while(pHead1){
            list1.push_back(pHead1);
            pHead1 = pHead1->next;
        }
        while(pHead2){
            list2.push_back(pHead2);
            pHead2 = pHead2->next;
        }
        ListNode* tmp = nullptr;
        int len1 = list1.size();
        int len2 = list2.size();
        for(int i=0; i<len1; i++){
            for(int j=0; j<len2; j++){
                if(list1[i] == list2[j]){
                    tmp = list1[i];
                    return tmp;
                }
            }
        }
        return nullptr;
    }
};

二：指针
这里先假设链表A头结点与结点8的长度 与 链表B头结点与结点8的长度相等，那么就可以用双指针。
初始化：指针ta指向链表A头结点，指针tb指向链表B头结点
如果ta == tb， 说明找到了第一个公共的头结点，直接返回即可。
否则，ta != tb，则++ta，++tb
所以现在的问题就变成，如何让本来长度不相等的变为相等的？
假设链表A长度为a， 链表B的长度为b，此时a != b
但是，a+b == b+a
因此，可以让a+b作为链表A的新长度，b+a作为链表B的新长度。

/*
struct ListNode {
	int val;
	struct ListNode *next;
	ListNode(int x) :
			val(x), next(NULL) {
	}
};*/
class Solution {
public:
    ListNode* FindFirstCommonNode( ListNode* pHead1, ListNode* pHead2) {
        ListNode* ta = pHead1;
        ListNode* tb = pHead2;
        while(ta!=tb){
            ta = (ta)?ta->next:pHead2;
            tb = (tb)?tb->next:pHead1;
        }
        return ta;
    }
};

【C++】

一：迭代+节点拆分

首先将该链表中每一个节点拆分为两个相连的节点，例如对于链表A→B→C，我们可以将其拆分为 A→A′→B→B′→C→C′。对于任意一个原节点S，其拷贝节点S'即为其后继节点。

这样，我们可以直接找到每一个拷贝节点S'的随机指针应当指向的节点，即为其原节点S的随机指针指向的节点T的后继节点T'。需要注意原节点的随机指针可能为空，我们需要特别判断这种情况。

当我们完成了拷贝节点的随机指针的赋值，我们只需要将这个链表按照原节点与拷贝节点的种类进行拆分即可，只需要遍历一次。
同样需要注意最后一个拷贝节点的后继节点为空，我们需要特别判断这种情况。

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/
class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(!head) return head;
        for(Node* node=head; node!=NULL; node=node->next->next){
            Node* newnode = new Node(node->val);
            newnode->next = node->next;
            node->next = newnode;
        }
        for(Node* node=head; node!=NULL; node=node->next->next){
            Node* newnode = node->next;
            newnode->random = (node->random!=NULL)?node->random->next:NULL;
        }
        Node* newhead = head->next;
        for(Node* node=head; node!=NULL; node=node->next){
            Node* newnode = node->next;
            node->next = node->next->next;
            newnode->next = (newnode->next!=NULL)?newnode->next->next:NULL;
        }
        return newhead;
    }
};

时间复杂度：O(n)，其中n是链表的长度。我们只需要遍历该链表三次。
空间复杂度：O(1)。注意返回值不计入空间复杂度。

二：哈希表+回溯

用哈希表记录每一个节点对应新节点的创建情况。遍历该链表的过程中，我们检查「当前节点的后继节点」和「当前节点的随机指针指向的节点」的创建情况。如果这两个节点中的任何一个节点
的新节点没有被创建，我们都立刻递归地进行创建。当我们拷贝完成，回溯到当前层时，我们即可完成当前节点的指针赋值。
注意一个节点可能被多个其他节点指向，因此我们可能递归地多次尝试拷贝某个节点，为了防止重复拷贝，我们需要首先检查当前节点是否被拷贝过，如果已经拷贝过，我们可以直接从哈希表中
取出拷贝后的节点的指针并返回即可。

在实际代码中，我们需要特别判断给定节点为空节点的情况。

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/
class Solution {
public:
    unordered_map<Node*, Node*> map;
    Node* copyRandomList(Node* head) {
        if(!head) return head;
        while(!map.count(head)){
            Node* newnode = new Node(head->val);
            map[head] = newnode;
            newnode->next = copyRandomList(head->next);
            newnode->random = copyRandomList(head->random);
        }
        return map[head];
    }
};

时间复杂度：O(n)，其中n是链表的长度。对于每个节点，我们至多访问其「后继节点」和「随机指针指向的节点」各一次，均摊每个点至多被访问两次。
空间复杂度：O(n)，其中n是链表的长度。为哈希表的空间开销。

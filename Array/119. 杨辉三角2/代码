[C++]

代码（自己）：
class Solution {
public:
    vector<int> getRow(int rowIndex) {
        vector<vector<int>> a(rowIndex+1);
        for(int i=0; i<=rowIndex; i++){
            a[i].resize(i+1);
            a[i][0]=a[i][i]=1;
            for(int j=1; j<i; j++){
                a[i][j] = a[i-1][j-1]+a[i-1][j];
            }
        }
        return a[rowIndex];
    }
};


官方解释：    #https://leetcode-cn.com/problems/pascals-triangle-ii/solution/yang-hui-san-jiao-ii-by-leetcode-solutio-shuk/
我们可以一行一行地计算杨辉三角。每当我们计算出第 ii 行的值，我们就可以在线性时间复杂度内计算出第 i+1i+1 行的值。

官方代码：
class Solution {
public:
    vector<int> getRow(int rowIndex) {
        vector<vector<int>> C(rowIndex + 1);
        for (int i = 0; i <= rowIndex; ++i) {
            C[i].resize(i + 1);
            C[i][0] = C[i][i] = 1;
            for (int j = 1; j < i; ++j) {
                C[i][j] = C[i - 1][j - 1] + C[i - 1][j];
            }
        }
        return C[rowIndex];
    }
};


优化：
注意到对第i+1行的计算仅用到了第i行的数据，因此可以使用滚动数组的思想优化空间复杂度。
class Solution {
public:
    vector<int> getRow(int rowIndex) {
        vector<int> pre, cur;
        for (int i = 0; i <= rowIndex; ++i) {
            cur.resize(i + 1);
            cur[0] = cur[i] = 1;
            for (int j = 1; j < i; ++j) {
                cur[j] = pre[j - 1] + pre[j];
            }
            pre = cur;
        }
        return pre;
    }
};


进一步优化：
递推式表明，当前行第i项的计算只与上一行第i−1项及第i项有关。因此我们可以倒着计算当前行，这样计算到第i项时，第i−1项仍然是上一行的值。
class Solution {
public:
    vector<int> getRow(int rowIndex) {
        vector<int> row(rowIndex + 1);
        row[0] = 1;
        for (int i = 1; i <= rowIndex; ++i) {
            for (int j = i; j > 0; --j) {
                row[j] += row[j - 1];
            }
        }
        return row;
    }
};


法二：线性递增
class Solution {
public:
    vector<int> getRow(int rowIndex) {
        vector<int> row(rowIndex + 1);
        row[0] = 1;
        for (int i = 1; i <= rowIndex; ++i) {
            row[i] = 1LL * row[i - 1] * (rowIndex - i + 1) / i;
        }
        return row;
    }
};

[C++]

代码（自己）：
1.双指针
class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
        int a = 0;
        int b = 0;
        for(a=0; a<nums.size(); a++){
            if(nums[a]!=val){
                nums[b]=nums[a];
                b++;
            }
        }
        return b;
    }
};

2.通用
class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
        int index = 0;
        for(int num : nums){
            if(num != val){
                nums[index] = num;
                index++;
            }
        }
        return (index+1);
    }
};


官方解释：    #https://leetcode-cn.com/problems/remove-element/solution/yi-chu-yuan-su-by-leetcode-solution-svxi/
由于题目要求删除数组中等于val的元素，因此输出数组的长度一定小于等于输入数组的长度，我们可以把输出的数组直接写在输入数组上。可以使用双指针：右指针right指向当前将要处理的元素，左指针left指向下一个将要赋值的位置。

如果右指针指向的元素不等于val，它一定是输出数组的一个元素，我们就将右指针指向的元素复制到左指针位置，然后将左右指针同时右移；

如果右指针指向的元素等于val，它不能在输出数组里，此时左指针不动，右指针右移一位。

整个过程保持不变的性质是：区间[0,left)中的元素都不等于val。当左右指针遍历完输入数组以后，left的值就是输出数组的长度。

这样的算法在最坏情况下（输入数组中没有元素等于val），左右指针各遍历了数组一次。

class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
        int n = nums.size();
        int left = 0;
        for (int right = 0; right < n; right++) {
            if (nums[right] != val) {
                nums[left] = nums[right];
                left++;
            }
        }
        return left;
    }
};


优化：
如果要移除的元素恰好在数组的开头，例如序列[1,2,3,4,5]，当val 为1时，我们需要把每一个元素都左移一位。注意到题目中说：「元素的顺序可以改变」。实际上我们可以直接将最后一个元素5移动到序列开头，取代元素1，得到序列[5,2,3,4]，同样满足题目要求。这个优化在序列中val 元素的数量较少时非常有效。

实现方面，我们依然使用双指针，两个指针初始时分别位于数组的首尾，向中间移动遍历该序列。

如果左指针left 指向的元素等于val，此时将右指针right 指向的元素复制到左指针left 的位置，然后右指针right 左移一位。如果赋值过来的元素恰好也等于val，可以继续把右指针right指向的元素的值赋值过来（左指针left指向的等于val的元素的位置继续被覆盖），直到左指针指向的元素的值不等于val为止。

当左指针left和右指针right重合的时候，左右指针遍历完数组中所有的元素。

class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
        int left = 0, right = nums.size();
        while (left < right) {
            if (nums[left] == val) {
                nums[left] = nums[right - 1];
                right--;
            } else {
                left++;
            }
        }
        return left;
    }
};

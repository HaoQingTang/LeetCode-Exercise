【C++】

不可以直接暴力解（贪心？），超过时间限制！

一：动态规划
dp[i] = dp[i-1]+beans[i-1]*个数-(beans[i]-beans[i-1])*(len-i)

class Solution {
public:
    long long minimumRemoval(vector<int>& beans) {
        int len = beans.size();
        if(len==1) return 0;
        sort(beans.begin(),beans.end());
        vector<long long int> dp(len,0);
        for(int i=1; i<len; i++){
            dp[0] += (beans[i]-beans[0]);             //初始化
        }
        long long int minval = dp[0];
        int count = 1;
        for(int i=1; i<len; i++){
            if(i>0 && beans[i]==beans[i-1]){
                dp[i] = dp[i-1];
                count++;
            }
            else{
                dp[i] = dp[i-1]+(long long int)beans[i-1]*count-(long long int)(beans[i]-beans[i-1])*(len-i);;
                count = 1;
            }
            minval = min(minval,dp[i]);
        }
        return minval;
    }
};

时间复杂度：O(n)
空间复杂度：O(n)

【C++】

一：动态规划

这道题中，给定总金额amount和数组coins，要求计算金额之和等于amount的硬币组合数。其中，coins的每个元素可以选取多次，且不考虑选取元素的顺序，因此这道题需要计算的是选取硬币
的组合数。

可以通过动态规划的方法计算可能的组合数。用dp[x]表示金额之和等于x的硬币组合数，目标是求dp[amount]。

动态规划的边界是dp[0]=1。只有当不选取任何硬币时，金额之和才为0，因此只有1种硬币组合。

对于面额为coin的硬币，当coin≤i≤amount时，如果存在一种硬币组合的金额之和等于i−coin，则在该硬币组合中增加一个面额为coin 的硬币，即可得到一种金额之和等于i的硬币组合。
因此需要遍历coins，对于其中的每一种面额的硬币，更新数组dp中的每个大于或等于该面额的元素的值。

由此可以得到动态规划的做法：
初始化dp[0]=1；
遍历coins，对于其中的每个元素coin，进行如下操作：
遍历i从coin到amount，将dp[i−coin] 的值加到dp[i]。
最终得到dp[amount] 的值即为答案。

上述做法不会重复计算不同的排列。因为外层循环是遍历数组coins 的值，内层循环是遍历不同的金额之和，在计算dp[i] 的值时，可以确保金额之和等于i的硬币面额的顺序，由于顺序确定，
因此不会重复计算不同的排列。

class Solution {
public:
    int change(int amount, vector<int>& coins) {
        vector<int> dp(amount+1);
        dp[0] = 1;
        for(int coin:coins){
            for(int i=coin; i<=amount; i++){
                dp[i] += dp[i-coin];
            }
        }
        return dp[amount];
    }
};

时间复杂度：O(Sn)
空间复杂度：O(S)，S代表总金额

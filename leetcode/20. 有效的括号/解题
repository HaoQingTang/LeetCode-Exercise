【C++】

一：栈，哈希表
我们遍历给定的字符串s。当我们遇到一个左括号时，我们会期望在后续的遍历中，有一个相同类型的右括号将其闭合。由于后遇到的左括号要先闭合，因此我们可以将这个左括号放入栈顶。

当我们遇到一个右括号时，我们需要将一个相同类型的左括号闭合。此时，我们可以取出栈顶的左括号并判断它们是否是相同类型的括号。
如果不是相同的类型，或者栈中并没有左括号，那么字符串s无效，返回False。为了快速判断括号的类型，我们可以使用哈希表存储每一种括号。哈希表的键为右括号，值为相同类型的左括号。

在遍历结束后，如果栈中没有左括号，说明我们将字符串s中的所有左括号闭合，返回True，否则返回False。

注意到有效字符串的长度一定为偶数，因此如果字符串的长度为奇数，我们可以直接返回False，省去后续的遍历判断过程。

class Solution {
public:
    bool isValid(string s) {
        int len = s.size();
        if(len%2==1) return false;
        stack<char> stk;
        unordered_map<char,char> pair={
            {'(',')'},
            {'{','}'},
            {'[',']'}
        };
        for(char ch:s){
            if(pair.count(ch)){
                stk.push(ch);
            }
            else{
                if(stk.empty() || pair[stk.top()]!=ch){
                    return false;
                }
                else stk.pop();
            }
        }
        if(stk.empty()) return true;
        else return false;
    }
};

时间复杂度：O(n)，其中n是字符串s的长度。
空间复杂度：O(n+∣Σ∣)，其中Σ 表示字符集，本题中字符串只包含6种括号，∣Σ∣=6。栈中的字符数量为O(n)，而哈希表使用的空间为O(∣Σ∣)，相加即可得到总空间复杂度。

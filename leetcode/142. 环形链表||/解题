【C++】

一：哈希表

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        if(!head || !head->next) return NULL;
        unordered_set<ListNode*> set;
        while(head){
            if(set.find(head)==set.end()){
                set.insert(head);
                head = head->next;
            }
            else{
                return head;
            }
        }
        return NULL;
    }
};

时间复杂度：O(n)
空间复杂度：O(n)

二：双指针
使用两个指针，fast与slow。它们起始都位于链表的头部。随后，slow指针每次向后移动一个位置，而fast指针向后移动两个位置。如果链表中存在环，则fast指针最终将再次与slow 指针在环中相遇。
设链表中环外部分的长度为a。slow指针进入环后，又走了b的距离与fast相遇。此时，fast指针已经走完了环的n圈，因此它走过的总距离为 a+n(b+c)+b=a+(n+1)b+nc。
据题意，任意时刻，fast指针走过的距离都为slow 指针的2倍。因此，我们有

a+(n+1)b+nc=2(a+b)⟹a=c+(n−1)(b+c)

有了a=c+(n−1)(b+c)的等量关系，我们会发现：从相遇点到入环点的距离加上n−1圈的环长，恰好等于从链表头部到入环点的距离。

因此，当发现slow与fast相遇时，我们再额外使用一个指针ptr。起始，它指向链表头部；随后，它和slow每次向后移动一个位置。最终，它们会在入环点相遇。

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        
        ListNode* fast = head;
        ListNode* slow = head;
        while(fast && fast->next){                   //快慢指针第一相遇
            fast = fast->next->next;
            slow = slow->next;
            if(fast == slow) break;
        }
        if(!fast || !fast->next) return NULL;
        fast = head;
        while(fast!=slow){                     //第二次相遇找入口
            fast = fast->next;
            slow = slow->next;
            
        }
        return fast;
    }
};

时间复杂度：O(n)
空间复杂度：O(1)

【C++】

一：递归，回溯
class Solution {
public:
    unordered_map<char,string> map = {
        {'2',"abc"},
        {'3',"def"},
        {'4',"ghi"},
        {'5',"jkl"},
        {'6',"mno"},
        {'7',"pqrs"},
        {'8',"tuv"},
        {'9',"wxyz"}};

    void combine(vector<string> &result,int pos, string &digits, string &str){
        if(pos==digits.size()){
            result.push_back(str);
            return;
        }
        for(int i=0; i<map[digits[pos]].size(); i++){
            str = str + map[digits[pos]][i];
            combine(result,pos+1,digits,str);
            str = str.substr(0,str.size()-1);
        }
    }

    vector<string> letterCombinations(string digits) {
        int len = digits.size();
        vector<string> result;
        if(len==0) return result;
        string str;
        combine(result,0,digits,str);
        return result;
    }
};

时间复杂度：O(3^m×4^n)，其中m是输入中对应3个字母的数字个数（包括数字2、3、4、5、6、8），n是输入中对应4个字母的数字个数（包括数字7、9），m+n是输入数字的总个数。
当输入包含m个对应3个字母的数字和n个对应4个字母的数字时，不同的字母组合一共有3^m×4^n种，需要遍历每一种字母组合。
空间复杂度：O(m+n)，其中m是输入中对应3个字母的数字个数，n是输入中对应4个字母的数字个数，m+n是输入数字的总个数。
除了返回值以外，空间复杂度主要取决于哈希表以及回溯过程中的递归调用层数，哈希表的大小与输入无关，可以看成常数，递归调用层数最大为m+n。

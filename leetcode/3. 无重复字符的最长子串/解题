【C++】

一：滑动窗口
以示例一中的字符串abcabcbb 为例，找出从每一个字符开始的，不包含重复字符的最长子串，那么其中最长的那个字符串即为答案。
对于示例一中的字符串，我们列举出这些结果，其中括号中表示选中的字符以及最长的字符串：
以(a)bcabcbb 开始的最长字符串为(abc)abcbb；
以a(b)cabcbb 开始的最长字符串为a(bca)bcbb；
以ab(c)abcbb 开始的最长字符串为ab(cab)cbb；
以abc(a)bcbb 开始的最长字符串为abc(abc)bb；
以abca(b)cbb 开始的最长字符串为abca(bc)bb；
以abcab(c)bb 开始的最长字符串为abcab(cb)b；
以abcabc(b)b 开始的最长字符串为abcabc(b)b；
以abcabcb(b) 开始的最长字符串为abcabcb(b)。
如果我们依次递增地枚举子串的起始位置，那么子串的结束位置也是递增的！这里的原因在于，假设我们选择字符串中的第k个字符作为起始位置，并且得到了不包含重复字符的最长子串的结束位置为rk。
那么当我们选择第k+1个字符作为起始位置时，首先从k+1到rk的字符显然是不重复的，并且由于少了原本的第k个字符，我们可以尝试继续增大rk，直到右侧出现了重复字符为止。

这样一来，我们就可以使用「滑动窗口」来解决这个问题了：
我们使用两个指针表示字符串中的某个子串（或窗口）的左右边界，其中左指针代表着上文中「枚举子串的起始位置」，而右指针即为上文中的rk；
在每一步的操作中，我们会将左指针向右移动一格，表示我们开始枚举下一个字符作为起始位置，然后我们可以不断地向右移动右指针，但需要保证这两个指针对应的子串中没有重复的字符。
在移动结束后，这个子串就对应着以左指针开始的，不包含重复字符的最长子串。我们记录下这个子串的长度；
在枚举结束后，我们找到的最长的子串的长度即为答案。

判断重复字符：
在上面的流程中，我们还需要使用一种数据结构来判断是否有重复的字符，常用的数据结构为哈希集合（即 C++ 中的 std::unordered_set，Java 中的 HashSet，Python 中的 set, JavaScript 中的 Set）。
在左指针向右移动的时候，我们从哈希集合中移除一个字符，在右指针向右移动的时候，我们往哈希集合中添加一个字符。

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        unordered_set<char> str;
        int len = s.size();
        int tmp = 0;
        int end = -1;                  //右指针
        int maxNum = 0;
        for(int i=0; i<len; i++){     //左指针
            if(i != 0){
                str.erase(s[i-1]);
            }
            while(end+1<len && str.find(s[end+1])==str.end()){
                str.insert(s[end+1]);
                end++;
            }
            tmp = end-i+1;
            maxNum = max(tmp,maxNum);
        }
        return maxNum;
    }
};

时间复杂度：O(N)，其中N是字符串的长度。左指针和右指针分别会遍历整个字符串一次。
空间复杂度：O(∣Σ∣)，其中Σ 表示字符集（即字符串中可以出现的字符），∣Σ∣ 表示字符集的大小。
在本题中没有明确说明字符集，因此可以默认为所有 ASCII 码在[0,128)内的字符，即∣Σ∣=128。我们需要用到哈希集合来存储出现过的字符，而字符最多有∣Σ∣ 个，因此空间复杂度为O(∣Σ∣)。

二：动态规划

状态定义： 设动态规划列表dp ，dp[j]代表以字符s[j]为结尾的 “最长不重复子字符串” 的长度。

转移方程： 固定右边界j ，设字符s[j]左边距离最近的相同字符为s[i] ，即 s[i]=s[j] 。

当i<0，即s[j] 左边无相同字符，则 dp[j]=dp[j−1]+1 ；
当dp[j−1]<j−i ，说明字符s[i] 在子字符串dp[j−1] 区间之外 ，则dp[j]=dp[j−1]+1 ；
当dp[j−1]≥j−i ，说明字符s[i] 在子字符串dp[j−1] 区间之中 ，则dp[j]的左边界由s[i] 决定，即 dp[j]=j−i ；

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int len = s.size();
        if(len==0) return 0;
        vector<int> dp(len);
        unordered_map<char, int> map;             //记录每个字符最近出现的索引
        dp[0] = 1;
        map[s[0]] = 0;
        int maxval = dp[0];
        for(int i=1; i<len; i++){
            if(map.find(s[i])==map.end()){
                map[s[i]] = i;
                dp[i] = dp[i-1]+1;
            }
            else{
                int j = map[s[i]];
                if(dp[i-1]<i-j) dp[i] = dp[i-1]+1;
                else dp[i] = i-j;
                map[s[i]] = i;
            }
            maxval = max(maxval, dp[i]);
        }
        return maxval;
    }
};

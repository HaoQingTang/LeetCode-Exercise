【C++】

一：dfs 回溯

对于这类寻找所有可行解的题，我们都可以尝试用「搜索回溯」的方法来解决。

class Solution {
public:
    void dfs(vector<int> &candidates,int target,vector<vector<int>> &result,vector<int> tmp,int pos){
        if(pos==candidates.size()){
            return;
        }
        if(target==0){
            result.push_back(tmp);
            return;
        }
        dfs(candidates,target,result,tmp,pos+1);  //跳过
        if(target-candidates[pos]>=0){
            tmp.push_back(candidates[pos]);
            dfs(candidates,target-candidates[pos],result,tmp,pos);
            tmp.pop_back();   //回溯
        }
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> result;
        vector<int> tmp;
        if(candidates.size()==1 && target<candidates[0]) return result;
        dfs(candidates,target,result,tmp,0);
        return result;
    }
};
时间复杂度：O(S)，其中S为所有可行解的长度之和。从分析给出的搜索树我们可以看出时间复杂度取决于搜索树所有叶子节点的深度之和，即所有可行解的长度之和。
在这题中，我们很难给出一个比较紧的上界，我们知道O(n×2^n)是一个比较松的上界，即在这份代码中，n个位置每次考虑选或者不选，如果符合条件，就加入答案的时间代价。
但是实际运行的时候，因为不可能所有的解都满足条件，递归的时候我们还会用 target - candidates[idx] >= 0 进行剪枝，所以实际运行情况是远远小于这个上界的。
空间复杂度：O(target)。除答案数组外，空间复杂度取决于递归的栈深度，在最差情况下需要递归O(target) 层。


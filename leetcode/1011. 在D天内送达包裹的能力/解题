【C++】

一：二分

对运载能力进行二分查找
理论最低运力：只确保所有包裹能够被运送，自然也包括重量最大的包裹，此时理论最低运力为 max，max 为数组 weights 中的最大值
理论最高运力：使得所有包裹在最短时间（一天）内运送完成，此时理论最高运力为 sum，sum 为数组 weights 的总和

class Solution {
public:
    int shipWithinDays(vector<int>& weights, int days) {
        int l = 0;
        for(int i=0; i<weights.size(); i++){
            l = max(l, weights[i]);
        }
        int r = accumulate(weights.begin(),weights.end(),0);
        int ans = 0;
        while(l<=r){
            int mid = (l+r)/2;
            int count = 1;
            int value = 0;
            for(int i=0; i<weights.size(); i++){
                if(value+weights[i]>mid){
                    count++;
                    value = 0;
                }
                value += weights[i];
            }
            if(count<=days){
                r = mid-1;
                ans = mid;
            }
            else l = mid+1;
        }
        return ans;
    }
};

时间复杂度：O(nlog(Σw))，其中n是数组weights 的长度，Σw 是数组weights 中元素的和。二分查找需要执行的次数为O(log(Σw))，每一步中需要对数组weights 进行依次遍历，时间为O(n)，
相乘即可得到总时间复杂度。
空间复杂度：O(1)。

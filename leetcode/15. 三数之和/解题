【C++】

一：排序+双指针
本题的难点在于如何去除重复解。

算法流程：
1. 特判，对于数组长度n，如果数组为null或者数组长度小于3，返回[]。
2. 对数组进行排序。
3. 遍历排序后数组：
若nums[i]>0：因为已经排序好，所以后面不可能有三个数加和等于0，直接返回结果。
对于重复元素：跳过，避免出现重复解  nums[i]==nums[i-1]
令左指针L=i+1，右指针R=n−1，当L<R 时，执行循环：
当nums[i]+nums[L]+nums[R]==0，执行循环，判断左界和右界是否和下一位置重复，去除重复解（nums[L]==nums[L+1], nums[R]==nums[R-1]。并同时将L,R 移到下一位置，寻找新的解
若和大于0，说明nums[R] 太大，R左移
若和小于0，说明nums[L] 太小，L右移

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int len = nums.size();
        vector<vector<int>> result;
        if(len<3) return result;
        sort(nums.begin(),nums.end());
        for(int i=0; i<len; i++){
            if(nums[i]>0) return result;
            if(i>0 && nums[i]==nums[i-1]) continue;    //除重
            int L = i+1;                //左指针
            int R = len-1;              //右指针
            while(L<R){
                int sum = nums[i]+nums[L]+nums[R];
                if(sum==0){
                    vector<int> tmp;
                    tmp.push_back(nums[i]);
                    tmp.push_back(nums[L]);
                    tmp.push_back(nums[R]);
                    result.push_back(tmp);
                    while(L<R && nums[L]==nums[L+1]) L++;         //除重
                    while(L<R && nums[R]==nums[R-1]) R--;         //除重
                    L++;
                    R--;
                }
                else if(sum>0) R--;
                else L++;
            }
        }
        return result;
    }
};

时间复杂度：O(n^2)，数组排序O(NlogN)，遍历数组O(n)，双指针遍历O(n)，总体 O(NO(NlogN)+O(n)∗O(n)，O(n^2)
空间复杂度：O(1)

【C++】

一：动态规划

考虑当前位置如果是一个负数的话，那么我们希望以它前一个位置结尾的某个段的积也是个负数，这样就可以负负得正，并且我们希望这个积尽可能「负得更多」，即尽可能小。
如果当前位置是一个正数的话，我们更希望以它前一个位置结尾的某个段的积也是个正数，并且希望它尽可能地大。于是这里我们可以再维护一个fmin(i)，它表示以第i个元素结尾的乘积最小子数组的乘积，
那么我们可以得到这样的动态规划转移方程：
fmax(i) = max{fmax(i-1)*ai, fmin(i-1)*ai, ai}
fmin(i) = min{fmax(i-1)*ai, fmin(i-1)*ai, ai}

它代表第i个元素结尾的乘积最大子数组的乘积fmax(i)，可以考虑把ai加入第i−1个元素结尾的乘积最大或最小的子数组的乘积中，二者加上ai，三者取大，就是第i个元素结尾的乘积最大子数组的乘积。
第i个元素结尾的乘积最小子数组的乘积fmin(i)同理。

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        vector<int> dpmax(nums.size());             //到第i位乘积最大
        vector<int> dpmin(nums.size());             //到第i位乘积最小（有可能负负得正）例如：[-2,3,-4]
        dpmax[0] = nums[0];
        dpmin[0] = nums[0];
        int maxval = dpmax[0];
        for(int i=1; i<nums.size(); i++){
            dpmax[i] = max(dpmax[i-1]*nums[i], max(dpmin[i-1]*nums[i],nums[i]));
            dpmin[i] = min(dpmin[i-1]*nums[i], min(dpmax[i-1]*nums[i],nums[i]));
            maxval = max(maxval, dpmax[i]);
        }
        return maxval;
    }
};

时间复杂度：O(n)
空间复杂度：O(n)

空间优化：
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        //vector<int> dpmax(nums.size());             //到第i位乘积最大
        //vector<int> dpmin(nums.size());             //到第i位乘积最小（有可能负负得正）
        int dpmax = nums[0];
        int dpmin = nums[0];
        int maxval = dpmax;
        for(int i=1; i<nums.size(); i++){
            int  mx = dpmax, mn = dpmin;
            dpmax = max(mx*nums[i], max(mn*nums[i],nums[i]));
            dpmin = min(mn*nums[i], min(mx*nums[i],nums[i]));
            maxval = max(maxval, dpmax);
        }
        return maxval;
    }
};

时间复杂度：O(n)
空间复杂度：O(1)

【C++】

!!!这道题是典型的贪心算法，通过局部最优解得到全局最优解。

一：贪心 顺藤摸瓜（从头至尾）

如果我们「贪心」地进行正向查找，每次找到可到达的最远位置，就可以在线性时间内得到最少的跳跃次数。

例如，对于数组 [2,3,1,2,4,2,3]，初始位置是下标 0，从下标 0 出发，最远可到达下标 2。下标 0 可到达的位置中，下标 1 的值是 3，从下标 1 出发可以达到更远的位置，因此第一步到达下标 1。
从下标 1 出发，最远可到达下标 4。下标 1 可到达的位置中，下标 4 的值是 4 ，从下标 4 出发可以达到更远的位置，因此第二步到达下标 4。

在具体的实现中，我们维护当前能够到达的最大下标位置，记为边界。我们从左到右遍历数组，到达边界时，更新边界并将跳跃次数增加 1。
在遍历数组时，我们不访问最后一个元素，这是因为在访问最后一个元素之前，我们的边界一定大于等于最后一个位置，否则就无法跳到最后一个位置了。
如果访问最后一个元素，在边界正好为最后一个位置的情况下，我们会增加一次「不必要的跳跃次数」，因此我们不必访问最后一个元素。

class Solution {
public:
    int jump(vector<int>& nums) {
        int maxpos = 0;    //可以到达的最大位置
        int end = 0;       //边界
        int step = 0;      //跳跃次数
        for(int i=0; i<nums.size()-1; i++){
            if(maxpos>=i){
                maxpos = max(maxpos, i+nums[i]);  //更新可以到达的最大位置
                if(i==end){           //到达边界，更新边界
                    end = maxpos;
                    step++;
                }
            }
        }
        return step;
    }
};

时间复杂度：O(n)，其中n是数组长度。
空间复杂度：O(1)。

二：贪心 顺瓜摸藤（从尾至头）

我们的目标是到达数组的最后一个位置，因此我们可以考虑最后一步跳跃前所在的位置，该位置通过跳跃能够到达最后一个位置。

如果有多个位置通过跳跃都能够到达最后一个位置，那么我们应该如何进行选择呢？直观上来看，我们可以「贪心」地选择距离最后一个位置最远的那个位置，也就是对应下标最小的那个位置。
因此，我们可以从左到右遍历数组，选择第一个满足要求的位置。

找到最后一步跳跃前所在的位置之后，我们继续贪心地寻找倒数第二步跳跃前所在的位置，以此类推，直到找到数组的开始位置。

class Solution {
public:
    int jump(vector<int>& nums) {
        int pos = nums.size()-1;   //跳跃后的位置，从右往左推
        int step = 0;
        while(pos>0){
            for(int i=0; i<pos; i++){
                if(i+nums[i]>=pos){
                    pos = i;
                    step++;
                    break;
                }
            }
        }
        return step;
    }
};

时间复杂度：O(n^2)，其中n是数组长度。有两层嵌套循环，在最坏的情况下，例如数组中的所有元素都是1，position 需要遍历数组中的每个位置，对于 position 的每个值都有一次循环。
空间复杂度：O(1)。

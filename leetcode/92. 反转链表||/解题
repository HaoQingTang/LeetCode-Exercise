【C++】

一：反转

先分别找到左位置的前一个节点和右位置的节点，截取从左位置到右位置的链表，反转，反转后与其他节点拼接在一起

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    void reverse(ListNode* head){
        ListNode* tmp = nullptr;
        ListNode* cur = head;
        while(cur!=nullptr){
            ListNode* nextnode = cur->next;
            cur->next = tmp;
            tmp = cur;
            cur = nextnode;
        }
    }
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if(!head->next) return head;
        ListNode* dummy = new ListNode(0, head);
        ListNode* pre = dummy;
        for(int i=0; i<left-1; i++){
            pre = pre->next;                 //指向左位置的前一个节点
        }
        ListNode* rightnode = pre;
        for(int i=0; i<right-left+1; i++){
            rightnode = rightnode->next;       //指向右位置的节点
        } 
        ListNode* leftnode = pre->next;        //指向左位置的节点
        ListNode* cur = rightnode->next;       //指向右位置的下一个节点
        pre->next = nullptr;
        rightnode->next = nullptr;
        reverse(leftnode);                //反转左和右之间的节点，反转后，右位置的节点在前，左位置的节点在后
        pre->next = rightnode;
        leftnode->next = cur;
        return dummy->next;
    }
};

时间复杂度：O(n)
空间复杂度：O(1)

二：双指针

使用三个指针变量 pre、curr、next 来记录反转的过程中需要的变量，它们的意义如下：
curr：指向待反转区域的第一个节点 left；（leftnode）
next：永远指向 curr 的下一个节点，循环过程中，curr 变化以后 next 会变化；（nextnode）
pre：永远指向待反转区域的第一个节点 left 的前一个节点，在循环过程中不变（tmp）

操作步骤：
先将 curr 的下一个节点记录为 next；
执行操作 ①：把 curr 的下一个节点指向 next 的下一个节点；
执行操作 ②：把 next 的下一个节点指向 pre 的下一个节点；
执行操作 ③：把 pre 的下一个节点指向 next。

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if(!head->next) return head;
        ListNode* dummy = new ListNode(0, head);
        ListNode* tmp = dummy;
        for(int i=0; i<left-1; i++){         //找左位置的前一个节点
            tmp = tmp->next;                    
        }
        ListNode* leftnode = tmp->next;
        for(int i=0; i<right-left; i++){            //将左位置的下一个节点至右位置的节点一个个插入到前面
            ListNode* nextnode = leftnode->next;
            leftnode->next = nextnode->next;
            nextnode->next = tmp->next;
            tmp->next = nextnode;
        }
        return dummy->next;
    }
};

时间复杂度：O(n)
空间复杂度：O(1)

【C++】

一：纵向扫描
纵向扫描时，从前往后遍历所有字符串的每一列，比较相同列上的字符是否相同，如果相同则继续对下一列进行比较，如果不相同则当前列不再属于公共前缀，当前列之前的部分为最长公共前缀。

class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        int len = strs.size();
        if(len==1) return strs[0];
        int len1 = strs[0].size();
        for(int i=0; i<len1; i++){
            char ch = strs[0][i];
            for(int j=1; j<len; j++){
                if(ch!=strs[j][i]||i==strs[j].size()) return strs[0].substr(0,i); 
            }
        }
        return strs[0];
    }
};

时间复杂度：O(mn)，其中m是字符串数组中的字符串的平均长度，n是字符串的数量。最坏情况下，字符串数组中的每个字符串的每个字符都会被比较一次。
空间复杂度：O(1)。使用的额外空间复杂度为常数。

二：横向扫描
用LCP(S1…Sn)表示字符串S1…Sn的最长公共前缀。
可以得到以下结论：LCP(S1…Sn)=LCP(LCP(LCP(S1,S2),S3),…Sn)

基于该结论，可以得到一种查找字符串数组中的最长公共前缀的简单方法。
依次遍历字符串数组中的每个字符串，对于每个遍历到的字符串，更新最长公共前缀，当遍历完所有的字符串以后，即可得到字符串数组中的最长公共前缀。
如果在尚未遍历完所有的字符串时，最长公共前缀已经是空串，则最长公共前缀一定是空串，因此不需要继续遍历剩下的字符串，直接返回空串即可。

class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        int len = strs.size();
        if(len==1) return strs[0];
        string prefix = strs[0];
        for(int i=1; i<len; i++){
            prefix = findLongestCommonPrefix(prefix, strs[i]);
            if(prefix == "") break;
        }
        return prefix;
    }

    string findLongestCommonPrefix(string &str1, string &str2){
        int len = min(str1.size(),str2.size());
        string prefix = str1;
        int index = 0;
        while(index<len && str1[index]==str2[index]){
            index++;
        }
        return str1.substr(0,index);
    }
};

时间复杂度：O(mn)，其中m是字符串数组中的字符串的平均长度，n是字符串的数量。最坏情况下，字符串数组中的每个字符串的每个字符都会被比较一次。
空间复杂度：O(1)。使用的额外空间复杂度为常数

【C++】

一：dfs+动态规划

简化一下这个问题：一棵二叉树，树上的每个点都有对应的权值，每个点有两种状态（选中和不选中），问在不能同时选中有父子关系的点的情况下，能选中的点的最大权值和是多少。

我们可以用f(o)表示选择o节点的情况下，o节点的子树上被选择的节点的最大权值和；g(o)表示不选择o节点的情况下，o节点的子树上被选择的节点的最大权值和；l和r代表o的左右孩子。

当o被选中时，o的左右孩子都不能被选中，故o被选中情况下子树上被选中点的最大权值和为l和r不被选中的最大权值和相加，即f(o)=g(l)+g(r)。
当o不被选中时，o的左右孩子可以被选中，也可以不被选中。对于o的某个具体的孩子x，它对o的贡献是x被选中和不被选中情况下权值和的较大值。故g(o)=max{f(l),g(l)}+max{f(r),g(r)}。

至此，我们可以用哈希表来存f和g的函数值，用深度优先搜索的办法后序遍历这棵二叉树，我们就可以得到每一个节点的f和g。根节点的f和g的最大值就是我们要找的答案。

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map<TreeNode*, int> dp1;   //选定该节点的房屋
    unordered_map<TreeNode*, int> dp2;   //不选定该节点的房屋
    void dfs(TreeNode* root){
        if(!root) return;
        dfs(root->left);          //递归至叶节点开始计算
        dfs(root->right);
        //root选中，它的左右节点不能选中
        dp1[root] = dp2[root->left]+dp2[root->right]+root->val;
        //root不选中，它的左右节点可以选中，也可以不选中
        dp2[root] = max(dp1[root->left],dp2[root->left])+max(dp1[root->right],dp2[root->right]);
    }
    int rob(TreeNode* root) {
        dfs(root);
        return max(dp1[root],dp2[root]);
    }
};

时间复杂度：O(n)
空间复杂度：O(n)

优化（不用哈希表）：
struct SubtreeStatus {
    int selected;
    int notSelected;
};

class Solution {
public:
    SubtreeStatus dfs(TreeNode* node) {
        if (!node) {
            return {0, 0};
        }
        auto l = dfs(node->left);
        auto r = dfs(node->right);
        int selected = node->val + l.notSelected + r.notSelected;
        int notSelected = max(l.selected, l.notSelected) + max(r.selected, r.notSelected);
        return {selected, notSelected};
    }

    int rob(TreeNode* root) {
        auto rootStatus = dfs(root);
        return max(rootStatus.selected, rootStatus.notSelected);
    }
};

时间复杂度：O(n)
空间复杂度：O(n)

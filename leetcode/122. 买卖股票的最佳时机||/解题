【C++】

一：动态规划

dp[i][1]：在第i天持有股票的最大收益
dp[i][0]：在第i天不持有股票的最大收益

对应关系：
dp[i][1]：可能第i-1天就持有股票；或者第i-1天不持有股票，第i天购入股票（-price）
dp[i][0]：可能第i-1天就不持有股票；或者第i-1天持有股票，第i天销售股票（+price）

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        vector<vector<int>> dp(prices.size()+1,vector<int>(2));
        dp[0][0] = 0;
        dp[0][1] = -prices[0];
        for(int i=1; i<prices.size(); i++){
            dp[i][0] = max(dp[i-1][0],dp[i-1][1]+prices[i]);
            dp[i][1] = max(dp[i-1][1],dp[i-1][0]-prices[i]);
        }
        return dp[prices.size()-1][0];
    }
};

时间复杂度：O(n)
空间复杂度：O(n)

二：空间优化

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int dp0 = 0;
        int dp1 = -prices[0];
        for(int i=1; i<prices.size(); i++){
            dp0 = max(dp0,dp1+prices[i]);
            dp1 = max(dp1,dp0-prices[i]);
        }
        return dp0;
    }
};

时间复杂度：O(n)
空间复杂度：O(1)

三：贪心

贪心算法的直觉：由于不限制交易次数，只要今天股价比昨天高，就交易。

该算法仅可以用于计算，但 计算的过程并不是真正交易的过程，但可以用贪心算法计算题目要求的最大利润

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int len = prices.size();
        if(len==1) return 0;
        int ans = 0;
        for(int i=1; i<len; i++){
            ans += max(0, prices[i]-prices[i-1]);
        }
        return ans;
    }
};

时间复杂度：O(n)
空间复杂度：O(1)

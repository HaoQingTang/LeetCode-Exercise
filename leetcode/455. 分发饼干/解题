【C++】

一：排序+贪心

对数组g和s排序，然后从小到大遍历g中的每个元素，对于每个元素找到能满足该元素的s中的最小的元素。具体而言，令i是g的下标，j是s的下标，初始时i和j都为 ，进行如下操作。

对于每个元素g[i]，找到未被使用的最小的j使得g[i]≤s[j]，则s[j] 可以满足g[i]。由于g和s已经排好序，因此整个过程只需要对数组g和s各遍历一次。当两个数组之一遍历结束时，
说明所有的孩子都被分配到了饼干，或者所有的饼干都已经被分配或被尝试分配（可能有些饼干无法分配给任何孩子），此时被分配到饼干的孩子数量即为可以满足的最多数量。

class Solution {
public:
    int findContentChildren(vector<int>& g, vector<int>& s) {
        int count = 0;
        sort(g.begin(), g.end());
        sort(s.begin(), s.end());
        int i=0, j=0;
        while(j<s.size()){
            if(g[i]<=s[j]){
                count++;
                i++;
                j++;
            }
            else j++;
            if(i==g.size()) break;
        }
        return count;
    }
};

时间复杂度：O(mlogm+nlogn)，其中m和n分别是数组g和s的长度。对两个数组排序的时间复杂度是O(mlogm+nlogn)，遍历数组的时间复杂度是O(m+n)，因此总时间复杂度是O(mlogm+nlogn)。
空间复杂度：O(logm+logn)，其中m和n分别是数组g和s的长度。空间复杂度主要是排序的额外空间开销。

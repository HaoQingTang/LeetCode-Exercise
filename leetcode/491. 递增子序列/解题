【C++】

一：递归回溯

用一个临时数组temp来保存当前选出的子序列，使用cur来表示当前位置的下标，在 dfs(cur, nums) 开始之前，[0,cur−1]这个区间内的所有元素都已经被考虑过，而[cur,n] 这个区间内的元素还未被考虑。在执行 dfs(cur, nums) 时，我们考虑 {\rm cur}cur 这个位置选或者不选，如果选择当前元素，那么把当前元素加入到 \rm temptemp 中，然后递归下一个位置，在递归结束后，应当把 \rm temptemp 的最后一个元素删除进行回溯；如果不选当前的元素，直接递归下一个位置。

当然，如果我们简单地这样枚举，对于每一个子序列，我们还需要做一次O(n)的合法性检查和哈希判重复，在执行整个程序的过程中，我们还需要使用一个空间代价 O(2^n)的哈希表来维护已经出现的子序列
的哈希值。我们可以对选择和不选择做一些简单的限定，就可以让枚举出来的都是合法的并且不重复：

使序列合法的办法非常简单，即给「选择」做一个限定条件，只有当前的元素大于等于上一个选择的元素的时候才能选择这个元素，这样枚举出来的所有元素都是合法的
那如何保证没有重复呢？我们需要给「不选择」做一个限定条件，只有当当前的元素不等于上一个选择的元素的时候，才考虑不选择当前元素，直接递归后面的元素。因为如果有两个相同的元素，我们会考
虑这样四种情况：
前者被选择，后者被选择
前者被选择，后者不被选择
前者不被选择，后者被选择
前者不被选择，后者不被选择
其中第二种情况和第三种情况其实是等价的，我们这样限制之后，舍弃了第二种，保留了第三种，于是达到了去重的目的。

class Solution {
public:
    void dfs(vector<int>& nums, vector<vector<int>>& result, int pos, int last, vector<int>& tmp){
        //last: 前一轮被选择的元素
        if(pos==nums.size()){
            if(tmp.size()>=2) result.push_back(tmp);
            return;
        }
        if(nums[pos]>=last){
            tmp.push_back(nums[pos]);
            dfs(nums, result, pos+1, nums[pos], tmp);       //选中pos位
            tmp.pop_back();
        }
        if(nums[pos]!=last) dfs(nums, result, pos+1, last, tmp);         //跳过pos位
    }
    vector<vector<int>> findSubsequences(vector<int>& nums) {
        vector<vector<int>> result;
        vector<int> tmp;
        dfs(nums, result, 0, INT_MIN, tmp);
        return result;
    }
};

时间复杂度：O(2^n·n)。仍然需要对子序列做二进制枚举，枚举出的序列虽然省去了判断合法性和哈希的过程，但是仍然需要O(n) 的时间添加到答案中。
空间复杂度：O(n)。这里临时数组的空间代价是O(n)，递归使用的栈空间的空间代价也是O(n)。

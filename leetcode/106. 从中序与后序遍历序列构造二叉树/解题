【C++】

一：递归
通过哈希表找到根节点，分别递归左子树和右子树

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map<int, int> map;
    TreeNode* mybuildTree(vector<int>& inorder, vector<int>& postorder, int instart, int inend, int poststart, int postend){
        if(instart>inend) return nullptr;
        int postroot = postend;
        int inroot = map[postorder[postroot]];
        int leftlen = inroot-instart;
        TreeNode* node = new TreeNode(postorder[postroot]);
        node->left = mybuildTree(inorder, postorder, instart, inroot-1, poststart, poststart+leftlen-1);
        node->right = mybuildTree(inorder, postorder, inroot+1, inend, poststart+leftlen, postend-1);
        return node;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int len = inorder.size();
        for(int i=0; i<len; i++){
            map[inorder[i]] = i;
        }
        return mybuildTree(inorder, postorder, 0, len-1, 0, len-1);
    }
};

时间复杂度：O(n)
空间复杂度：O(n)

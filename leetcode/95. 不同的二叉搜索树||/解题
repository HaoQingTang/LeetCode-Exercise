【C++】

一：递归回溯

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> generateTree(int start, int end){
        if(start>end) return {nullptr};
        vector<TreeNode*> allvec;
        for(int i=start; i<=end; i++){
            vector<TreeNode*> leftvec = generateTree(start, i-1);
            vector<TreeNode*> rightvec = generateTree(i+1, end);
            for(auto left:leftvec){
                for(auto right:rightvec){
                    TreeNode* cur = new TreeNode(i);
                    cur->left = left;
                    cur->right = right;
                    allvec.push_back(cur);
                }
            }
        }
        return allvec;
    }
    vector<TreeNode*> generateTrees(int n) {
        return generateTree(1, n);
    }
};

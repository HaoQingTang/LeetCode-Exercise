【C++】

一：动态规划

首先初始化长度为 n+1 的数组 dp，每个位置都为 0
如果 n 为 0，则结果为 0
对数组进行遍历，下标为 i，每次都将当前数字先更新为最大的结果，即 dp[i]=i，比如 i=4，最坏结果为 4=1+1+1+1 即为 4 个数字
动态转移方程为：dp[i] = MIN(dp[i], dp[i - j * j] + 1)，i 表示当前数字，j*j 表示平方数

class Solution {
public:
    int numSquares(int n) {
        vector<int> dp(n+1);
        dp[0] = 0;
        for(int i=1; i<=n; i++){
            dp[i] = i;
            int y = (int)sqrt(i);
            if(i==y*y){
                dp[i] = 1;
                continue;
            }
            else{
                for(int j=1; j<=y; j++){
                    dp[i] = min(dp[i], dp[i-j*j]+1);
                }
            }
        }
        return dp[n];
    }
};

class Solution {
public:
    int numSquares(int n) {
        vector<int> dp(n+1);
        dp[0] = 0;
        for(int i=1; i<=n; i++){
            dp[i] = i;
            for(int j=1; j*j<=i; j++){
                dp[i] = min(dp[i], dp[i-j*j]+1);
            }
        }
        return dp[n];
    }
};

时间复杂度：O(n·n^0.5)
空间复杂度：O(n)

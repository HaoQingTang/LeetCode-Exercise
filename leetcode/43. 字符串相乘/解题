【C++】

一：暴力解法
先计算成int，再将int转成string。不能ac！！！大整数乘法，范围超过long long int

class Solution {
public:
    string multiply(string num1, string num2) {
        int len1 = num1.size();
        int len2 = num2.size();
        long long int sum = 0;
        for(int i=len2-1; i>=0; i--){
            long long int val = 0;
            for(int j=len1-1; j>=0; j--){
                val += (num2[i]-'0')*(num1[j]-'0')*pow(10,(len1-j+1));
            }
            sum += val*pow(10,(len2-i+1));
        }
        return to_string(sum).substr(0,to_string(sum).size()-4);
    }
};

二：做加法
如果num1和num2之一是0，则直接将0作为结果返回即可。
如果num1和num2都不是0，则可以通过模拟「竖式乘法」的方法计算乘积。从右往左遍历乘数，将乘数的每一位与被乘数相乘得到对应的结果，再将每次得到的结果累加。
这道题中，被乘数是num1，乘数是num2。
需要注意的是，num2除了最低位以外，其余的每一位的运算结果都需要补0。

class Solution {
public:
    string multiply(string num1, string num2) {
        if (num1 == "0" || num2 == "0") {
            return "0";
        }
        string ans = "0";
        int m = num1.size(), n = num2.size();
        for (int i = n - 1; i >= 0; i--) {
            string curr;
            int add = 0;
            for (int j = n - 1; j > i; j--) {
                curr.push_back(0);
            }
            int y = num2.at(i) - '0';
            for (int j = m - 1; j >= 0; j--) {
                int x = num1.at(j) - '0';
                int product = x * y + add;
                curr.push_back(product % 10);
                add = product / 10;
            }
            while (add != 0) {
                curr.push_back(add % 10);
                add /= 10;
            }
            reverse(curr.begin(), curr.end());
            for (auto &c : curr) {
                c += '0';
            }
            ans = addStrings(ans, curr);
        }
        return ans;
    }

    string addStrings(string &num1, string &num2) {
        int i = num1.size() - 1, j = num2.size() - 1, add = 0;
        string ans;
        while (i >= 0 || j >= 0 || add != 0) {
            int x = i >= 0 ? num1.at(i) - '0' : 0;
            int y = j >= 0 ? num2.at(j) - '0' : 0;
            int result = x + y + add;
            ans.push_back(result % 10);
            add = result / 10;
            i--;
            j--;
        }
        reverse(ans.begin(), ans.end());
        for (auto &c: ans) {
            c += '0';
        }
        return ans;
    }
};

时间复杂度：O(mn+n^2)，其中m和n分别是num1和num2的长度。需要从右往左遍历num2，对于num2的每一位，都需要和num1的每一位计算乘积，因此计算乘积的总次数是mn。
字符串相加操作共有n 次，相加的字符串长度最长为m+n，因此字符串相加的时间复杂度是O(mn+n^2)。总时间复杂度是O(mn+n^2)。
空间复杂度：O(m+n)，其中m和n分别是num1和num2的长度。空间复杂度取决于存储中间状态的字符串，由于乘积的最大长度为m+n，因此存储中间状态的字符串的长度不会超过m+n。

三：做乘法
做加法的做法是从右往左遍历乘数，将乘数的每一位与被乘数相乘得到对应的结果，再将每次得到的结果累加，整个过程中涉及到较多字符串相加的操作。
如果使用数组代替字符串存储结果，则可以减少对字符串的操作。

令m和n分别表示num1和num2的长度，并且它们均不为0，则num1和num2的乘积的长度为m+n−1或m+n。简单证明如下：
如果num1和num2都取最小值，则num1=10^{m-1}，num2=10^{n-1}，num1*num2=10^{m+n-2}，乘积的长度为m+n−1；
如果num1和num2都取最大值，则num1=10^m-1，num2=10^n-1，num1*num1=10^{m+n}-10^m-10^n+1，乘积显然小于10^{m+n}且大于10^{m+n-1}，因此乘积的长度为m+n。

由于num1和num2的乘积的最大长度为m+n，因此创建长度为m+n的数组ansArr用于存储乘积。对于任意0≤i<m和0≤j<n，num1[i]*num2[j]的结果位于ansArr[i+j+1]，
如果ansArr[i+j+1]≥10，则将进位部分加到ansArr[i+j]。

最后，将数组ansArr转成字符串，如果最高位是0则舍弃最高位。

class Solution {
public:
    string multiply(string num1, string num2) {
        if (num1 == "0" || num2 == "0") {
            return "0";
        }
        int m = num1.size(), n = num2.size();
        auto ansArr = vector<int>(m + n);
        for (int i = m - 1; i >= 0; i--) {
            int x = num1.at(i) - '0';
            for (int j = n - 1; j >= 0; j--) {
                int y = num2.at(j) - '0';
                ansArr[i + j + 1] += x * y;
            }
        }
        for (int i = m + n - 1; i > 0; i--) {
            ansArr[i - 1] += ansArr[i] / 10;
            ansArr[i] %= 10;
        }
        int index = ansArr[0] == 0 ? 1 : 0;
        string ans;
        while (index < m + n) {
            ans.push_back(ansArr[index]);
            index++;
        }
        for (auto &c: ans) {
            c += '0';
        }
        return ans;
    }
};

时间复杂度：O(mn)，其中m和n分别是num1和num2的长度。需要计算num1的每一位和num2的每一位的乘积。
空间复杂度：O(m+n)，其中m和n分别是num1和num2的长度。需要创建一个长度为m+n的数组存储乘积。

【C++】

一：递归

这里有三种可能的情况：
1. 要删除的节点为叶子节点，可以直接删除。
2. 要删除的节点不是叶子节点且拥有右节点，则该节点可以由该节点的后继节点进行替代，该后继节点位于右子树中较低的位置。然后可以从后继节点的位置递归向下操作以删除后继节点。
3. 要删除的节点不是叶子节点，且没有右节点但是有左节点。这意味着它的后继节点在它的上面，但是我们并不想返回。我们可以使用它的前驱节点进行替代，然后再递归的向下删除前驱节点。

算法：
如果 key > root.val，说明要删除的节点在右子树，root.right = deleteNode(root.right, key)。
如果 key < root.val，说明要删除的节点在左子树，root.left = deleteNode(root.left, key)。
如果 key == root.val，则该节点就是我们要删除的节点，则：
如果该节点是叶子节点，则直接删除它：root = null。
如果该节点不是叶子节点且有右节点，则用它的后继节点的值替代 root.val = successor.val，然后删除后继节点。
如果该节点不是叶子节点且只有左节点，则用它的前驱节点的值替代 root.val = predecessor.val，然后删除前驱节点。

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int findnext(TreeNode* root){     //找到最小的比其大的节点的值
        root = root->right;
        while(root->left!=nullptr) root = root->left;
        return root->val;
    }
    int findpre(TreeNode* root){     //找到最大的比其小的节点的值
        root = root->left;
        while(root->right!=nullptr) root = root->right;
        return root->val;
    }
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(!root) return root;
        if(root->val<key) root->right = deleteNode(root->right, key);
        else if(root->val>key) root->left = deleteNode(root->left, key);
        else{
            if(root->left==nullptr && root->right==nullptr) root = nullptr;  //叶子节点
            else if(root->right!=nullptr){               //不是叶子节点，但有右子树
                root->val = findnext(root);
                root->right = deleteNode(root->right, root->val);
            }
            else{                                        //不是叶子节点，且没有右子树
                root->val = findpre(root);
                root->left = deleteNode(root->left, root->val);
            }
        }
        return root;
    }
};

时间复杂度：O(logN)。在算法的执行过程中，我们一直在树上向左或向右移动。首先先用O(H1)的时间找到要删除的节点，H1值得是从根节点到要删除节点的高度。
然后删除节点需要O(H2)的时间，H2指的是从要删除节点到替换节点的高度。由于O(H1+H2)=O(H)，H值得是树的高度，若树是一个平衡树则H=logN。
空间复杂度：O(H)，递归时堆栈使用的空间，H是树的高度。

二：中序遍历
先将值不为key的节点按中序遍历保存在数组中，再重新生成树

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* creat(vector<TreeNode*>& node, int left, int right){
        if(left>right) return nullptr;
        int mid = (left+right)/2;
        TreeNode* root = node[mid];
        root->left = creat(node, left, mid-1);
        root->right = creat(node, mid+1, right);
        return root;
    }
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(!root) return root;
        vector<TreeNode*> node;
        stack<TreeNode*> stk;
        while(!stk.empty()||root){
            while(root){
                stk.push(root);
                root = root->left;
            }
            root = stk.top();
            stk.pop();
            if(root->val!=key) node.push_back(root);
            root = root->right;
        }
        return creat(node, 0, node.size()-1);
    }
};

【C++】

一：迭代

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(!head || !head->next) return head;
        ListNode* tmp = nullptr;
        ListNode* cur = head;
        while(cur->next){
            ListNode* nextroot = cur->next;
            cur->next = tmp;
            tmp = cur;
            cur = nextroot;
        }
        cur->next = tmp;
        return cur;
    }
};

时间复杂度：O(n)
空间复杂度：O(1)

二：递归
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(!head || !head->next) return head;
        ListNode* newhead = reverseList(head->next);
        head->next->next = head;
        head->next = nullptr;
        return newhead;                                   //最终可以追溯到最后一个点
    }
};


时间复杂度：O(n)
空间复杂度：O(n)

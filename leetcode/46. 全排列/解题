【C++】

一：递归

class Solution {
public:
    void dfs(vector<vector<int>>& result, vector<int>& nums, int pos){
        if(pos==nums.size()-1){
            result.push_back(nums);
            return;
        }
        for(int i=pos; i<nums.size(); i++){
            swap(nums[pos],nums[i]);
            dfs(result, nums, pos+1);
            swap(nums[pos],nums[i]);             //回溯
        }
    }

    vector<vector<int>> permute(vector<int>& nums) {
        int len = nums.size();
        vector<vector<int>> result;
        if(len==1){
            result.push_back(nums);
            return result;
        }
        dfs(result, nums, 0);
        return result;
    }
};

时间复杂度：O(n×n!)，其中n为序列的长度。
空间复杂度：O(n)，其中n为序列的长度。除答案数组以外，递归函数在递归过程中需要为每一层递归函数分配栈空间，所以这里需要额外的空间且该空间取决于递归的深度，这里可知递归调用深度为O(n)。

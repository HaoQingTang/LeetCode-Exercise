【C++】

一：递归
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(p->val==root->val && q->val==root->val) return root;
        else if(p->val<root->val && q->val<root->val) return lowestCommonAncestor(root->left, p, q);
        else if(p->val>root->val && q->val>root->val) return lowestCommonAncestor(root->right, p ,q);
        else return root;   
    }
};

二：迭代：一次遍历

从根节点开始遍历；
如果当前节点的值大于p和q的值，说明p和q应该在当前节点的左子树，因此将当前节点移动到它的左子节点；
如果当前节点的值小于p和q的值，说明p和q应该在当前节点的右子树，因此将当前节点移动到它的右子节点；
如果当前节点的值不满足上述两条要求，那么说明当前节点就是「分岔点」。此时，p和q要么在当前节点的不同的子树中，要么其中一个就是当前节点。

可以发现，如果我们将这两个节点放在一起遍历，我们就省去了存储路径需要的空间。

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        TreeNode* node = root;
        while(true){
            if(p->val<node->val && q->val<node->val) node = node->left;
            else if(p->val>node->val && q->val>node->val) node = node->right;
            else break;
        }   
        return node;
    }
};

时间复杂度：O(n)
空间复杂度：O(1)

三：二次遍历，找分岔口

注意到题目中给出的是一棵「二叉搜索树」，因此我们可以快速地找出树中的某个节点以及从根节点到该节点的路径，例如我们需要找到节点p：

我们从根节点开始遍历；
如果当前节点就是p，那么成功地找到了节点；
如果当前节点的值大于p的值，说明p应该在当前节点的左子树，因此将当前节点移动到它的左子节点；
如果当前节点的值小于p的值，说明p应该在当前节点的右子树，因此将当前节点移动到它的右子节点。

对于节点q同理。在寻找节点的过程中，我们可以顺便记录经过的节点，这样就得到了从根节点到被寻找节点的路径。

当我们分别得到了从根节点到p和q的路径之后，我们就可以很方便地找到它们的最近公共祖先了。显然，p和q的最近公共祖先就是从根节点到它们路径上的「分岔点」，也就是最后一个相同的节点。
因此，如果我们设从根节点到p的路径为数组path_p，从根节点到q的路径为数组path_q，那么只要找出最大的编号i，其满足
path_p[i]=path_q[i]

那么对应的节点就是「分岔点」，即p和q的最近公共祖先就是path_p[i]（或 path_q[i]）。

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
    vector<TreeNode*> findPath(TreeNode*root, TreeNode*p){
        vector<TreeNode*> path;
        TreeNode* node = root;
        while(node->val!=p->val){
            if(p->val<node->val){
                path.push_back(node);
                node = node->left;
            }
            else if(p->val>node->val){
                path.push_back(node);
                node = node->right;
            }
        }
        path.push_back(node);
        return path;
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        vector<TreeNode*> pathp = findPath(root, p);
        vector<TreeNode*> pathq = findPath(root, q);
        TreeNode* node;
        for(int i=0; i<pathp.size()&&i<pathq.size(); i++){
            if(pathp[i]==pathq[i]) node = pathp[i];
            else break;
        }
        return node;
    }
};

时间复杂度：O(n)
空间复杂度：O(n)

【C++】

一：优先队列

对于本题而言，初始时，我们将数组nums的前k个元素放入优先队列中。每当我们向右移动窗口时，我们就可以把一个新的元素放入优先队列中，此时堆顶的元素就是堆中所有元素的最大值。
然而这个最大值可能并不在滑动窗口中，在这种情况下，这个值在数组nums中的位置出现在滑动窗口左边界的左侧。
因此，当我们后续继续向右移动窗口时，这个值就永远不可能出现在滑动窗口中了，我们可以将其永久地从优先队列中移除。

我们不断地移除堆顶的元素，直到其确实出现在滑动窗口中。此时，堆顶元素就是滑动窗口中的最大值。
为了方便判断堆顶元素与滑动窗口的位置关系，我们可以在优先队列中存储二元组(num,index)，表示元素num在数组中的下标为index。

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        priority_queue<pair<int, int>> q;         //存放数字和index
        for(int i=0; i<k; i++){
            q.emplace(nums[i],i);
        } 
        vector<int> result;
        result.push_back(q.top().first);              //放入第一个窗口的最大值
        for(int i=k; i<nums.size(); i++){
            q.emplace(nums[i],i);
            while(q.top().second<=i-k){                   //判断该最大值是否仍在窗口区间内
                q.pop();
            }
            result.push_back(q.top().first);
        }
        return result;
    }
};

时间复杂度：O(nlogn) 在最坏情况下，数组nums中的元素单调递增，那么最终优先队列中包含了所有元素，没有元素被移除。由于将一个元素放入优先队列的时间复杂度为O(logn)，因此总时间复杂度
为O(nlogn)。
空间复杂度：O(n)

二：单调队列（两头数组）
deque：双端队列容器

由于我们需要求出的是滑动窗口的最大值，如果当前的滑动窗口中有两个下标i和j，其中i在j的左侧（i<j），并且i对应的元素不大于j对应的元素（nums[i]≤nums[j]），那么会发生什么呢？

当滑动窗口向右移动时，只要i还在窗口中，那么j一定也还在窗口中，这是i在j的左侧所保证的。因此，由于nums[j] 的存在，nums[i]一定不会是滑动窗口中的最大值了，我们可以将nums[i] 永久地移除。

因此我们可以使用一个队列存储所有还没有被移除的下标。在队列中，这些下标按照从小到大的顺序被存储，并且它们在数组nums中对应的值是严格单调递减的。
因为如果队列中有两个相邻的下标，它们对应的值相等或者递增，那么令前者为i，后者为j，就对应了上面所说的情况，即nums[i] 会被移除，这就产生了矛盾。

当滑动窗口向右移动时，我们需要把一个新的元素放入队列中。为了保持队列的性质，我们会不断地将新的元素与队尾的元素相比较，如果前者大于等于后者，那么队尾的元素就可以被永久地移除，
我们将其弹出队列。我们需要不断地进行此项操作，直到队列为空或者新的元素小于队尾的元素。

由于队列中下标对应的元素是严格单调递减的，因此此时队首下标对应的元素就是滑动窗口中的最大值。但与方法一中相同的是，此时的最大值可能在滑动窗口左边界的左侧，并且随着窗口向右移动，
它永远不可能出现在滑动窗口中了。因此我们还需要不断从队首弹出元素，直到队首元素在窗口中为止。

为了可以同时弹出队首和队尾的元素，我们需要使用双端队列。满足这种单调性的双端队列一般称作「单调队列」。

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<int> q;
        int len = nums.size();
        for(int i=0; i<k; i++){
            while(!q.empty() && nums[i]>nums[q.back()]){
                q.pop_back();
            }
            q.push_back(i);
        }      
        vector<int> result;
        result.push_back(nums[q.front()]);
        for(int i=k; i<len; i++){
            while(!q.empty() && nums[i]>nums[q.back()]){          //保证第一个值永远是最大值
                q.pop_back();
            }
            q.push_back(i);
            if(q.front()<=i-k){                          //判断该最大值是否在窗口区间中
                q.pop_front();
            }
            result.push_back(nums[q.front()]);
        }
        return result;
    }
};


时间复杂度：O(n) 
空间复杂度：O(k)

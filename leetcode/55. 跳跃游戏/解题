【C++】

一：贪心

依次遍历数组中的每一个位置，并实时维护最远可以到达的位置。对于当前遍历到的位置x，如果它在最远可以到达的位置的范围内，那么我们就可以从起点通过若干次跳跃到达该位置，
因此我们可以用x+nums[x] 更新最远可以到达的位置。
在遍历的过程中，如果最远可以到达的位置大于等于数组中的最后一个位置，那就说明最后一个位置可达，我们就可以直接返回 True 作为答案。
反之，如果在遍历结束后，最后一个位置仍然不可达，我们就返回 False 作为答案。

class Solution {
public:
    bool canJump(vector<int>& nums) {
        int maxpos = 0;
        int end = 0;
        for(int i=0; i<nums.size(); i++){
            maxpos = max(maxpos, i+nums[i]);
            if(i==end){
                end = maxpos;
                if(end>=nums.size()-1){
                    return true;
                }
            }
        }
        return false;
    }
};

时间复杂度：O(n)，其中n为数组的大小。只需要访问nums数组一遍，共n个位置。
空间复杂度：O(1)，不需要额外的空间开销

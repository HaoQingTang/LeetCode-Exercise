【C++】

一：按行排序
我们可以使用min(numRows,len(s))个列表来表示 Z 字形图案中的非空行。

从左到右迭代s，将每个字符添加到合适的行。可以使用当前行和当前方向这两个变量对合适的行进行跟踪。

只有当我们向上移动到最上面的行或向下移动到最下面的行时，当前方向才会发生改变。

class Solution {
public:
    string convert(string s, int numRows) {
        if(numRows==1) return s;
        vector<string> lists(min(numRows,int(s.size())));
        int row = 0;
        int down = false;
        for(char c:s){
            lists[row] += c;
            if(row==0 || row==numRows-1) down = !down;
            if(down) row++;
            else row--;
        }
        string result;
        for(string x:lists){
            result += x;
        }
        return result;
    }
};

时间复杂度：O(n)，其中n==len(s)
空间复杂度：O(n)

二：按行访问
首先访问 行 0 中的所有字符，接着访问 行 1，然后 行 2，依此类推...

对于所有整数k，
行0中的字符位于索引k(2⋅numRows−2) 处;
行numRows−1中的字符位于索引k(2⋅numRows−2)+numRows−1 处;
内部的行i中的字符位于索引 k(2⋅numRows−2)+i 以及(k+1)(2⋅numRows−2)−i 处。

class Solution {
public:
    string convert(string s, int numRows) {

        if (numRows == 1) return s;

        string ret;
        int n = s.size();
        int cycleLen = 2 * numRows - 2;

        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j + i < n; j += cycleLen) {
                ret += s[j + i];
                if (i != 0 && i != numRows - 1 && j + cycleLen - i < n)
                    ret += s[j + cycleLen - i];
            }
        }
        return ret;
    }
};

时间复杂度：O(n)，其中n==len(s)。每个索引被访问一次。
空间复杂度：O(n)。对于 C++ 实现，如果返回字符串不被视为额外空间，则复杂度为O(1)。

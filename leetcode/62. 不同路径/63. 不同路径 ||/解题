【C++】

一：动态规划
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        vector<vector<int>> dp(m,vector<int>(n));
        bool grid = false;
        for(int i=0; i<n; i++){
            if(!grid && obstacleGrid[0][i]!=1) dp[0][i] = 1;
            else if(obstacleGrid[0][i]==1){
                dp[0][i] = 0;
                grid = true;
            }
            else if(grid) dp[0][i] = 0;
        }
        grid = false;
        for(int j=0; j<m; j++){
            if(!grid && obstacleGrid[j][0]!=1) dp[j][0] = 1;
            else if(obstacleGrid[j][0]==1){
                dp[j][0] = 0;
                grid = true;
            }
            else if(grid) dp[j][0] = 0;
        }
        for(int i=1; i<m; i++){
            for(int j=1; j<n; j++){
                if(obstacleGrid[i][j]==1) dp[i][j] = 0;
                //else if(obstacleGrid[i-1][j]==1) dp[i][j] = dp[i][j-1];
                //else if(obstacleGrid[i][j-1]==1) dp[i][j] = dp[i-1][j];
                else dp[i][j] = dp[i][j-1]+dp[i-1][j];
            }
        }
        return dp[m-1][n-1];
    }
};

时间复杂度：O(mn)
空间复杂度：O(1)

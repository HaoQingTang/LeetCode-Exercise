【C++】

一：动态规划（两维）

class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m, vector<int>(n));
        for(int i=0; i<m; i++){
            dp[i][0] = 1;
        }
        for(int i=0; i<n; i++){
            dp[0][i] = 1;
        }
        int maxval = 1;
        for(int i=1; i<m; i++){
            for(int j=1; j<n; j++){
                dp[i][j] = dp[i][j-1]+dp[i-1][j];
                maxval = max(maxval,dp[i][j]);
            }
        }
        return maxval;
    }
};

时间复杂度：O(mn)。
空间复杂度：O(mn)，即为存储所有状态需要的空间。注意到f(i,j) 仅与第i行和第i−1行的状态有关，因此我们可以使用滚动数组代替代码中的二维数组，使空间复杂度降低为O(n)。
此外，由于我们交换行列的值并不会对答案产生影响，因此我们总可以通过交换m和n使得m≤n，这样空间复杂度降低至O(min(m,n))。

二：数学组合
从左上角到右下角的过程中，我们需要移动m+n−2次，其中有m−1次向下移动，n−1次向右移动。因此路径的总数，就等于从m+n−2次移动中选择m−1次向下移动的方案数，即组合数：
(m+n−2)!/(m−1)!(n−1)!
因此我们直接计算出这个组合数即可。计算的方法有很多种：
如果使用的语言有组合数计算的 API，我们可以调用 API 计算；

如果没有相应的 API，我们可以使用(m+n−2)(m+n−3)⋯n/(m−1)!进行计算。

class Solution {
public:
    int uniquePaths(int m, int n) {
        long long ans = 1;
        for (int x = n, y = 1; y < m; ++x, ++y) {
            ans = ans * x / y;
        }
        return ans;
    }
};

时间复杂度：O(m)。由于我们交换行列的值并不会对答案产生影响，因此我们总可以通过交换m和n使得m≤n，这样空间复杂度降低至O(min(m,n))。
空间复杂度：O(1)。

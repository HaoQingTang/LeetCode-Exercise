【C++】

一：前序遍历和展开分两步进行 （数组）
用数组记录先序遍历后每个节点的顺序，再把数组中的节点连接起来。

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void inorder(vector<int>& result, TreeNode* root){
        if(!root) return;
        result.push_back(root->val);
        inorder(result, root->left);
        inorder(result, root->right);
    }
    void flatten(TreeNode* root) {
        if(!root) return;
        vector<int> result;
        inorder(result, root);
        TreeNode* node = root;
        for(int i=1; i<result.size(); i++){
            node->right = new TreeNode(result[i]);
            node->left = nullptr;
            node = node->right;
        }
    }
};

时间复杂度：O(n)
空间复杂度：O(n)

二：前序遍历和展开同步进行

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    void flatten(TreeNode* root) {
        if(!root) return;
        stack<TreeNode*> stk;
        TreeNode* tmp = nullptr;
        stk.push(root);
        while(!stk.empty()){
            TreeNode* cur = stk.top();
            stk.pop();
            if(tmp!=nullptr){
                root->right = cur;
                root->left = nullptr;
                root = root->right;
            }
            TreeNode* right = cur->right;
            TreeNode* left = cur->left;
            if(right){
                stk.push(right);
            }
            if(left){
                stk.push(left);
            }
            tmp = cur;
        }
    }
};


时间复杂度：O(n)
空间复杂度：O(n)

三：寻找前驱节点
注意到前序遍历访问各节点的顺序是根节点、左子树、右子树。如果一个节点的左子节点为空，则该节点不需要进行展开操作。如果一个节点的左子节点不为空，则该节点的左子树中的最后一个节点被访问
之后，该节点的右子节点被访问。该节点的左子树中最后一个被访问的节点是左子树中的最右边的节点，也是该节点的前驱节点。因此，问题转化成寻找当前节点的前驱节点。

具体做法是，对于当前节点，如果其左子节点不为空，则在其左子树中找到最右边的节点，作为前驱节点，将当前节点的右子节点赋给前驱节点的右子节点，然后将当前节点的左子节点赋给当前节点的右子
节点，并将当前节点的左子节点设为空。对当前节点处理结束后，继续处理链表中的下一个节点，直到所有节点都处理结束

class Solution {
public:
    void flatten(TreeNode* root) {
        TreeNode *curr = root;
        while (curr != nullptr) {
            if (curr->left != nullptr) {
                auto next = curr->left;
                auto predecessor = next;
                while (predecessor->right != nullptr) {
                    predecessor = predecessor->right;
                }
                predecessor->right = curr->right;
                curr->left = nullptr;
                curr->right = next;
            }
            curr = curr->right;
        }
    }
};


时间复杂度：O(n)
空间复杂度：O(1)

【C++】

一：
用数组记录每个节点。

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    void reorderList(ListNode* head) {
        vector<ListNode*> vec1;
        ListNode* cur = head;
        while(cur){
            vec1.push_back(cur);
            cur = cur->next;
        }
        int i = 0, j = vec1.size()-1;
        while(i<j){
            vec1[i]->next = vec1[j];
            i++;
            if(i==j) break;
            vec1[j]->next = vec1[i];
            j--;
        } 
        vec1[i]->next = nullptr;
    }
};

时间复杂度：O(n)
空间复杂度：O(n)

二：
1.找链表中点
2.对链表中点后的节点进行反转
3.合并两个链表

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    void reorderList(ListNode* head) {
        ListNode* mid = find(head);
        ListNode* l1 = head;
        ListNode* newroot = reverse(mid->next);
        mid->next = nullptr;
        merge(l1,newroot);
    }
    
    ListNode* find(ListNode* head){
        ListNode* fast = head;
        ListNode* slow = head;
        while(fast->next != nullptr && fast->next->next != nullptr){
            fast = fast->next->next;
            slow = slow->next;
        }
        return slow;
    }

    ListNode* reverse(ListNode* head){
        ListNode* tmp = nullptr;
        ListNode* cur = head;
        while(cur){
            ListNode* nextroot = cur->next;
            cur->next = tmp;
            tmp = cur;
            cur = nextroot;
        }
        return tmp;
    }

    void merge(ListNode* l1, ListNode* l2){
        ListNode* l1_tmp;
        ListNode* l2_tmp;
        while (l1 != nullptr && l2 != nullptr) {
            l1_tmp = l1->next;
            l2_tmp = l2->next;

            l1->next = l2;
            l1 = l1_tmp;

            l2->next = l1;
            l2 = l2_tmp;
        }
    }
};

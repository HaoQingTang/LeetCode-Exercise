【C++】

一：动态规划

可以使用动态规划降低时间复杂度。我们用dp(i,j) 表示以(i,j)为右下角，且只包含1的正方形的边长最大值。如果我们能计算出所有dp(i,j) 的值，那么其中的最大值即为矩阵中只包含1的正方形的边长
最大值，其平方即为最大正方形的面积。

那么如何计算dp中的每个元素值呢？对于每个位置(i,j)，检查在矩阵中该位置的值：

如果该位置的值是0，则dp(i,j)=0，因为当前位置不可能在由1组成的正方形中；
如果该位置的值是1，则dp(i,j) 的值由其上方、左方和左上方的三个相邻位置的dp 值决定。具体而言，当前位置的元素值等于三个相邻位置的元素中的最小值加1，状态转移方程如下：
dp(i,j)=min(dp(i−1,j),dp(i−1,j−1),dp(i,j−1))+1

此外，还需要考虑边界条件。如果i和j中至少有一个为0，则以位置(i,j) 为右下角的最大正方形的边长只能是1，因此 dp(i,j)=1。

class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        vector<vector<int>> dp(matrix.size(),vector<int>(matrix[0].size()));  
        //dp[i][j]表示以matrix[i][j]为右下角，其余都是1的正方形的最大边长
        int m = matrix.size();
        int n = matrix[0].size();
        int maxval = 0;
        for(int i=0; i<m; i++){
            if(matrix[i][0]=='1'){
                dp[i][0] = 1;
                maxval = 1;
            }
            else dp[i][0] = 0;
        }
        for(int i=0; i<n; i++){
            if(matrix[0][i]=='1'){
                dp[0][i] = 1;
                maxval = 1;
            }
            else dp[0][i] = 0;
        }
        for(int i=1; i<m; i++){
            for(int j=1; j<n; j++){
                if(matrix[i][j]=='1'){
                    dp[i][j] = min(dp[i-1][j],min(dp[i][j-1],dp[i-1][j-1]))+1;
                    maxval = max(maxval, dp[i][j]);
                }
            }
        }
        return maxval*maxval;
    }
};

时间复杂度：O(mn)
空间复杂度：O(mn)

【C++】

一：动态规划
我们定义dp[i] 表示字符串s前i个字符组成的字符串 s[0..i−1] 是否能被空格拆分成若干个字典中出现的单词。从前往后计算考虑转移方程，每次转移的时候我们需要枚举包含位置i−1 的最后一个单词，
看它是否出现在字典中以及除去这部分的字符串是否合法即可。公式化来说，我们需要枚举s[0..i−1] 中的分割点j ，看s[0..j−1] 组成的字符串 s1（默认j=0 时s1为空串）和s[j..i−1] 组成的字符
串s2是否都合法，如果两个字符串均合法，那么按照定义s1和s2拼接成的字符串也同样合法。由于计算到dp[i] 时我们已经计算出了dp[0..i−1] 的值，因此字符串s1是否合法可以直接由p[j] 得知，
剩下的我们只需要看s2是否合法即可，因此我们可以得出如下转移方程：dp[i]=dp[j] && check(s[j..i−1])

其中check(s[j..i−1]) 表示子串s[j..i−1] 是否出现在字典中。

对于检查一个字符串是否出现在给定的字符串列表里一般可以考虑哈希表来快速判断，同时也可以做一些简单的剪枝，枚举分割点的时候倒着枚举，如果分割点j到i的长度已经大于字典列表里最长的单词的
长度，那么就结束枚举，但是需要注意的是下面的代码给出的是不带剪枝的写法。

对于边界条件，我们定义dp[0]=true 表示空串且合法。

class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        unordered_set<string> set;
        for(auto word:wordDict){
            set.insert(word);
        }
        vector<bool> dp(s.size()+1);           //代表前i个字符串是否合法
        dp[0] = true;             //空串且合法
        for(int i=1; i<=s.size(); i++){
            for(int j=0; j<i; j++){
                //字符串[0,j-1]合法，判断字符串[j,i-j]是否合法
                if(dp[j] && set.find(s.substr(j,i-j))!=set.end()){      
                    dp[i] = true;
                }
            }
        }
        return dp[s.size()];
    }
};

时间复杂度：O(n^2)
空间复杂度：O(n)

剪枝优化：
枚举分割点的时候倒着枚举，如果分割点j到i的长度已经大于字典列表里最长的单词的长度，那么就结束枚举。

class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        unordered_set<string> set;
        int maxlen = 0;
        for(auto word:wordDict){
            set.insert(word);
            maxlen = max(maxlen, int(word.size()));
        }
        vector<bool> dp(s.size()+1);           //代表前i个字符串是否合法
        dp[0] = true;             //空串且合法
        for(int i=1; i<=s.size(); i++){
            for(int j=i; j>=0 && i-j<=maxlen ; j--){
                //字符串[0,j-1]合法，判断字符串[j,i-j]是否合法
                if(dp[j] && set.find(s.substr(j,i-j))!=set.end()){      
                    dp[i] = true;
                }
            }
        }
        return dp[s.size()];
    }
};

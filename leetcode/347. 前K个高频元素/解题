【C++】

一：哈希表+sort

class Solution {
public:
    static int cmp(pair<int, int> a, pair<int, int> b){  
        return a.second > b.second;
    }
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int, int> map;
        for(int num:nums){
            map[num]++;
        }
        vector<pair<int, int>> tmp;
        for(auto it=map.begin(); it!=map.end(); it++){
            tmp.push_back({it->first, it->second});
        }
        sort(tmp.begin(),tmp.end(),cmp);
        vector<int> result;
        for(int i=0; i<k; i++){
            result.push_back(tmp[i].first);
        }
        return result;
    }
};

二：哈希表+小顶堆

首先遍历整个数组，并使用哈希表记录每个数字出现的次数，并形成一个「出现次数数组」。找出原数组的前k个高频元素，就相当于找出「出现次数数组」的前k大的值。

最简单的做法是给「出现次数数组」排序。但由于可能有O(N)个不同的出现次数（其中 NN 为原数组长度），故总的算法复杂度会达到O(NlogN)，不满足题目的要求。

在这里，我们可以利用堆的思想：建立一个小顶堆，然后遍历「出现次数数组」：

如果堆的元素个数小于k，就可以直接插入堆中。
如果堆的元素个数等于k，则检查堆顶与当前出现次数的大小。如果堆顶更大，说明至少有k个数字的出现次数比当前值大，故舍弃当前值；否则，就弹出堆顶，并将当前值插入堆中。
遍历完成后，堆中的元素就代表了「出现次数数组」中前k大的值。

class Solution {
public:
    static bool cmp(pair<int, int> a, pair<int, int> b){  
        return a.second > b.second;
    }
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int, int> map;
        for(int num:nums){
            map[num]++;
        }
        priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(&cmp)> pq(cmp);
        for(auto it=map.begin(); it!=map.end(); it++){
            if(pq.size()==k){
                if(it->second>pq.top().second){
                    pq.pop();
                    pq.push({it->first, it->second});
                }
            }
            else{
                pq.push({it->first, it->second});
            }
        }
        vector<int> result;
        while(!pq.empty()){
            result.push_back(pq.top().first);
            pq.pop();
        }
        return result;
    }
};

时间复杂度：O(Nlogk)，其中N为数组的长度。我们首先遍历原数组，并使用哈希表记录出现次数，每个元素需要O(1)的时间，共需O(N)的时间。随后，我们遍历「出现次数数组」，由于堆的大小至多为k，
因此每次堆操作需要O(logk)的时间，共需O(Nlogk)的时间。二者之和为O(Nlogk)。
空间复杂度：O(N)。哈希表的大小为O(N)，而堆的大小为O(k)，共计为O(N)。

三：哈希表+快排

在对数组arr[l…r] 做快速排序的过程中，我们首先将数组划分为两个部分arr[i…q−1] 与arr[q+1…j]，并使得 arr[i…q−1] 中的每一个值都不超过arr[q]，且arr[q+1…j] 中的每一个值都大于arr[q]。

于是，我们根据k与左侧子数组arr[i…q−1] 的长度（为q−i）的大小关系：

如果k≤q−i，则数组arr[l…r] 前k大的值，就等于子数组arr[i…q−1] 前 k 大的值。
否则，数组arr[l…r] 前k大的值，就等于左侧子数组全部元素，加上右侧子数组arr[q+1…j] 中前k−(q−i) 大的值。

原版的快速排序算法的平均时间复杂度为O(NlogN)。我们的算法中，每次只需在其中的一个分支递归即可，因此算法的平均时间复杂度降为O(N)。

class Solution {
public:
    void quick(vector<pair<int,int>>& nums, int k, int start, int end, vector<int>& result){
        int index = start;
        int num = nums[start].second;
        for(int i=start+1; i<nums.size(); i++){
            if(nums[i].second>num){
                swap(nums[index+1], nums[i]);
                index++;
            }
        }
        swap(nums[index],nums[start]);               //index前的数都比num大
        if(k<=index-start){
            quick(nums, k, start, index-1, result);
        }
        else{
            for(int i=start; i<=index; i++){
                result.push_back(nums[i].first);
            }
            if(k>(index-start+1)){
                quick(nums, (k-(index-start+1)), index+1, end, result);
            }
        }
    }

    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int, int> map;
        for(int num:nums){
            map[num]++;
        }
        vector<pair<int,int>> tmp;
        for(auto it=map.begin(); it!=map.end(); it++){
            tmp.push_back({it->first, it->second});
        }
        vector<int> result;
        quick(tmp, k, 0, tmp.size()-1, result);
        return result;
    }
};

时间复杂度：O(N^2)，其中 N 为数组的长度。
设处理长度为N的数组的时间复杂度为f(N)。由于处理的过程包括一次遍历和一次子分支的递归，最好情况下，有f(N)=O(N)+f(N/2)，根据 主定理，能够得到f(N)=O(N)。
最坏情况下，每次取的中枢数组的元素都位于数组的两端，时间复杂度退化为 O(N^2)。
平均情况下，时间复杂度为O(N)。
空间复杂度：O(N)。哈希表的大小为O(N)，用于排序的数组的大小也为O(N)，快速排序的空间复杂度最好情况为O(logN)，最坏情况为O(N)。

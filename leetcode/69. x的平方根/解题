【C++】

一：二分搜索

由于x平方根的整数部分ans是满足k^2≤x的最大k值，因此我们可以对k进行二分查找，从而得到答案。

二分查找的下界为0，上界可以粗略地设定为x。在二分查找的每一步中，我们只需要比较中间元素mid 的平方与x的大小关系，并通过比较的结果调整上下界的范围。由于我们所有的运算都是整数运算，
不会存在误差，因此在得到最终的答案ans 后，也就不需要再去尝试ans+1了。

class Solution {
public:
    int mySqrt(int x) {
        if(x==0) return 0;
        long long int left = 1, right = x;
        long long int tmp = -1;
        while(left<=right){
            long long int mid = (left+right)/2;
            if((long long int)mid*mid==x) return mid;
            else if((long long int)mid*mid>x) right = mid-1;
            else{
                tmp = mid;
                left = mid+1;
            }
        }
        return tmp;
    }
};

时间复杂度：O(logx)，即为二分查找需要的次数。
空间复杂度：O(1)。

二：牛顿迭代法
牛顿迭代法是一种可以用来快速求解函数零点的方法。

为了叙述方便，我们用C表示待求出平方根的那个整数。显然，C的平方根就是函数y = f(x) = x^2 - C的零点。

牛顿迭代法的本质是借助泰勒级数，从初始值开始快速向零点逼近。我们任取一个x0作为初始值，在每一步的迭代中，我们找到函数图像上的点(xi, f(xi))，过该点作一条斜率为该点导数f'(xi)的直线，
与横轴的交点记为 x{i+1}。x{i+1}相较于xi而言距离零点更近。在经过多次迭代后，我们就可以得到一个距离零点非常接近的交点。下图给出了从x0开始迭代两次，得到x1和x2的过程。

算法
我们选择 x0 = C作为初始值。

在每一步迭代中，我们通过当前的交点xi，找到函数图像上的点(xi, xi^2 - C)，作一条斜率为f'(xi) = 2xi的直线，直线的方程为：yl=2xi(x−xi)+xi^2−C=2xix−(xi^2+C)
与横轴的交点为方程2xix - (x_i^2 + C) = 0的解，即为新的迭代结果x{i+1}：x{i+1} =0.5(xi+C/xi)在进行k次迭代后，xk的值与真实的零点C^0.5足够接近，即可作为答案。

class Solution {
public:
    int mySqrt(int x) {
        if (x == 0) {
            return 0;
        }

        double C = x, x0 = x;
        while (true) {
            double xi = 0.5 * (x0 + C / x0);
            if (fabs(x0 - xi) < 1e-7) {
                break;
            }
            x0 = xi;
        }
        return int(x0);
    }
};

时间复杂度：O(logx)，此方法是二次收敛的，相较于二分查找更快。
空间复杂度：O(1)。

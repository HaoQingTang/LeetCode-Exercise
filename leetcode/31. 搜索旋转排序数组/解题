【C++】

一：二分查找
将数组从中间分开成左右两部分的时候，一定有一部分的数组是有序的。拿示例来看，我们从 6 这个位置分开以后数组变成了 [4, 5, 6] 和 [7, 0, 1, 2] 两个部分，
其中左边 [4, 5, 6] 这个部分的数组是有序的，其他也是如此。
这启示我们可以在常规二分查找的时候查看当前 mid 为分割位置分割出来的两个部分 [l, mid] 和 [mid + 1, r] 哪个部分是有序的，并根据有序的那个部分确定我们该如何改变二分查找的上下界，
因为我们能够根据有序的那部分判断出 target 在不在这个部分：
如果 [l, mid - 1] 是有序数组，且 target 的大小满足[nums[l],nums[mid])，则我们应该将搜索范围缩小至 [l, mid - 1]，否则在 [mid + 1, r] 中寻找。
如果 [mid, r] 是有序数组，且 target 的大小满足(nums[mid+1],nums[r]]，则我们应该将搜索范围缩小至 [mid + 1, r]，否则在 [l, mid - 1] 中寻找。

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int len = nums.size();
        if(len==1){
            if(nums[0]==target) return 0;
            else return -1;
        }
        int left = 0, right = len-1;
        while(left<=right){
            int mid = (left+right)/2;
            if(nums[mid]==target) return mid;
            if(nums[0]<=nums[mid]){
                if(nums[0]<=target && target<nums[mid]) right = mid-1;
                else left = mid+1;
            }
            else{
                if(nums[mid]<target && target<=nums[len-1]) left = mid+1;
                else right = mid-1;
            }
        }
        return -1;
    }
};

时间复杂度：O(logn)，其中n为nums 数组的大小。整个算法时间复杂度即为二分查找的时间复杂度O(logn)。
空间复杂度：O(1) 。我们只需要常数级别的空间存放变量。

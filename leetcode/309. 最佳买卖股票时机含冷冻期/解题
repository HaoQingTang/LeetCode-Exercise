【C++】

一：动态规划

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if(prices.size()==1) return 0;
        vector<vector<int>> dp(prices.size(),vector<int>(2));
        dp[0][0] = 0;
        dp[0][1] = -prices[0];
        dp[1][0] = max(dp[0][0],prices[1]-prices[0]);          
        dp[1][1] = max(dp[0][1],dp[0][0]-prices[1]);           
        for(int i=2; i<prices.size(); i++){
            dp[i][0] = max(dp[i-1][0], dp[i-1][1]+prices[i]);    //不持有股票
            dp[i][1] = max(dp[i-1][1], dp[i-2][0]-prices[i]);    //持有股票
        }
        return dp[prices.size()-1][0];
    }
};

时间复杂度：O(n)
空间复杂度：O(n)

二：动态规划（状态转移）

我们用f[i]表示第i天结束之后的「累计最大收益」。根据题目描述，由于我们最多只能同时买入（持有）一支股票，并且卖出股票后有冷冻期的限制，因此我们会有三种不同的状态：

我们目前持有一支股票，对应的「累计最大收益」记为f[i][0]；
我们目前不持有任何股票，并且处于冷冻期中，对应的「累计最大收益」记为f[i][1]；
我们目前不持有任何股票，并且不处于冷冻期中，对应的「累计最大收益」记为f[i][2]。

如何进行状态转移呢？在第i天时，我们可以在不违反规则的前提下进行「买入」或者「卖出」操作，此时第i天的状态会从第i−1天的状态转移而来；我们也可以不进行任何操作，此时第i天的状态就等同于
第i−1 天的状态。那么我们分别对这三种状态进行分析：

对于f[i][0]，我们目前持有的这一支股票可以是在第i−1 天就已经持有的，对应的状态为f[i−1][0]；或者是第i天买入的，那么第i−1天就不能持有股票并且不处于冷冻期中，对应的状态为f[i−1][2]加上
买入股票的负收益prices[i]。因此状态转移方程为：f[i][0]=max(f[i−1][0],f[i−1][2]−prices[i])

对于f[i][1]，我们在第i天结束之后处于冷冻期的原因是在当天卖出了股票，那么说明在第i−1 天时我们必须持有一支股票，对应的状态为f[i−1][0] 加上卖出股票的正收益prices[i]。
因此状态转移方程为：f[i][1]=f[i−1][0]+prices[i]

对于f[i][2]，我们在第i天结束之后不持有任何股票并且不处于冷冻期，说明当天没有进行任何操作，即第i−1天时不持有任何股票：如果处于冷冻期，对应的状态为f[i−1][1]；如果不处于冷冻期，
对应的状态为f[i−1][2]。因此状态转移方程为：f[i][2]=max(f[i−1][1],f[i−1][2])

这样我们就得到了所有的状态转移方程。如果一共有n天，那么最终的答案即为：max(f[n−1][0],f[n−1][1],f[n−1][2])

注意到如果在最后一天（第n−1 天）结束之后，手上仍然持有股票，那么显然是没有任何意义的。因此更加精确地，最终的答案实际上是f[n−1][1]和f[n−1][2] 中的较大值，即：max(f[n−1][1],f[n−1][2])

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if (prices.empty()) {
            return 0;
        }

        int n = prices.size();
        // f[i][0]: 手上持有股票的最大收益
        // f[i][1]: 手上不持有股票，并且处于冷冻期中的累计最大收益
        // f[i][2]: 手上不持有股票，并且不在冷冻期中的累计最大收益
        vector<vector<int>> f(n, vector<int>(3));
        f[0][0] = -prices[0];
        for (int i = 1; i < n; ++i) {
            f[i][0] = max(f[i - 1][0], f[i - 1][2] - prices[i]);
            f[i][1] = f[i - 1][0] + prices[i];
            f[i][2] = max(f[i - 1][1], f[i - 1][2]);
        }
        return max(f[n - 1][1], f[n - 1][2]);
    }
};


时间复杂度：O(n)
空间复杂度：O(n)
